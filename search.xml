<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>查找算法总结</title>
      <link href="/2019/07/20/shu-ju-jie-gou/cha-zhao-suan-fa-zong-jie/"/>
      <url>/2019/07/20/shu-ju-jie-gou/cha-zhao-suan-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>常见的查找算法有7种</p><h2 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1. 顺序查找"></a>1. 顺序查找</h2><p>顺序查找对序列没有排序要求<br>ASL = 1/n(1+2+3+…+n) = (n+1)/2;<br>T((n+1)/2)复杂度为 O(n)</p><h2 id="2-折半查找"><a href="#2-折半查找" class="headerlink" title="2. 折半查找"></a>2. 折半查找</h2><p>也叫二分查找，必须是有序的序列。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>             <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不存在</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有序后，过程可以转化为一颗二叉查找树，复杂度为O(log2n)</p><h2 id="3-插值查找"><a href="#3-插值查找" class="headerlink" title="3. 插值查找"></a>3. 插值查找</h2><p>是对折半查找的一种习惯优化，就是不每次都是折半，即索引移动一半。而是根据值的差和索引差的比来权衡索引移动多少。<br>翻字典的例子举得很好，想找apple，肯定一开始不是翻到字典中间，而是知道了值a到M的距离差和页面索引差的比。会自适应</p><p>修改折半查找代码这句即可</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 折半</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于 mid = low + (high - low) / 2;</span><span class="token comment" spellcheck="true">// 插值</span>mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>key <span class="token operator">-</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="4-斐波那契查找"><a href="#4-斐波那契查找" class="headerlink" title="4. 斐波那契查找"></a>4. 斐波那契查找</h2><h2 id="5-树查找"><a href="#5-树查找" class="headerlink" title="5. 树查找"></a>5. 树查找</h2><p>树有很多，二叉查找树，AVL二叉平衡树，红黑树，B树，B+树等</p><p>AVL树即若左右子树存在，那么两者高度差绝对值小于1，而且左右子树也是平衡树。主要是为了解决二叉树退变为单链表的可能。更“匀称”化。</p><p>红黑树：红黑树并不满足AVL条件，是一般二叉查找树的变形，增加颜色间隔特点。红黑树是用非严格的平衡来换取增删节点时候旋转次数的降低，任何不平衡都会在三次旋转之内解决，而AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多。 <strong>所以红黑树的插入删除效率更高。</strong></p><p>B-树，也就是balance-树，多路查找树，主要是用在磁盘文件系统查找上。   </p><p><img src="https://i.loli.net/2019/07/24/5d38684c864e025342.jpg" alt="B树">    </p><p>m阶的B树的一些性质：  </p><ol><li>每个节点最多有m棵子树（即最多m-1个关键字）</li><li>有多层，跟结点至少两个子树。 </li><li>除根之外，任何非终结点至少有m/2棵子树。</li></ol><p>B+树，是B树的一种变形，主要用在数据库索引上。</p><p><img src="https://ivanzz1001.github.io/records/assets/img/data_structure/ds_bplus_tree1.jpg" alt="B+树"><br><strong>m阶B+树和B树的差异是:</strong></p><ol><li>有n棵子树的节点含有n个关键字</li><li>节点的关键字会重复传递下去，因为B+非叶子结点不包含信息，只是单纯的索引。而B树每个节点都有信息，查找到就返回了，B+树要到叶子节点。  </li><li>每个节点最大的关键字，在其叶子节点也是最大。B+树可以看作是没有“右边拓展”。</li><li>B+树叶子节点本身依关键字自小而大顺序链接。</li></ol><h2 id="6-分块查找"><a href="#6-分块查找" class="headerlink" title="6. 分块查找"></a>6. 分块查找</h2><h2 id="7-hash表查找"><a href="#7-hash表查找" class="headerlink" title="7. hash表查找"></a>7. hash表查找</h2><p>常见的就是Map，就是设计一个大数据和一个hash函数，hash(key)映射到索引的位置存储。如果没有hash冲突的话，查找过程就是做一次hash计算而已，复杂度O(1)。  </p><p>hash冲突解决方法：开放地址法和拉链法</p><p>开放地址法分为：</p><ol><li>线性探测法: 即f(key + di) = hash的di是增幅为1的。直到找到空桶位置</li><li>二次探测法：f(key + di^2)</li><li>随机探测法：三种方法都是对di的取法有分别而已。适合不同情况。</li></ol><p>拉链法：<br>使用一个单链表把冲突的串起来，桶的位置为表头。hashmap的put方法如是。先判断key是否为null, hashmap有专门的null存储。然后找到数组索引，从表头遍历，key和hash一样替换value。否则作为新表头放到桶处，next节点指向原表头。</p><blockquote><p>jdk1.8后，解决冲突方法为单链表结合红黑树。短的时候使用单链表，长度达到一定改为红黑树。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/maybe2030/p/4715035.html" target="_blank" rel="noopener">七大查找算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法&amp;数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统流程及并发优化分析</title>
      <link href="/2019/07/19/jia-gou/miao-sha-xi-tong-liu-cheng-ji-bing-fa-you-hua-fen-xi/"/>
      <url>/2019/07/19/jia-gou/miao-sha-xi-tong-liu-cheng-ji-bing-fa-you-hua-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>之前看了下慕课网的秒杀系统，也动手实战过。分析下常见的秒杀抢购和抢红包系统流程和架构优化。<br><img src="https://camo.githubusercontent.com/53caa931ebbbdd55df8b2a9d0ece54875f37ed41/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30372f32302f3564333331373462383539386534343131382e706e67" alt="页面流程"><br>提供给用户的前端页面主要有商品列表页和对应的详情页。登录用户信息这里只是使用了cookie。没有另外数据库层面的存储。  </p><h3 id="1-列表页"><a href="#1-列表页" class="headerlink" title="1.列表页"></a>1.列表页</h3><p><img src="https://camo.githubusercontent.com/5582617dcf6b45abfab2cd27b033befe5e5b1928/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30372f32302f3564333331373462396231613835373135332e706e67" alt="秒杀商品列表页"><br>列表页面比较简单。只是暂时而已。但是有关键的开始和结束时间。这些会存在客户端，以便以后的获取系统时间对比。判断是否开始秒杀所用。  </p><h3 id="2-详情页"><a href="#2-详情页" class="headerlink" title="2.详情页"></a>2.详情页</h3><p><img src="https://i.loli.net/2019/07/20/5d33174b4524e59471.png" alt="用户标识存cookie"><br><img src="https://i.loli.net/2019/07/20/5d3318424464658160.png" alt="秒杀等待"><br><img src="https://i.loli.net/2019/07/20/5d33174b57e6d99135.png" alt="暴露秒杀接口"><br><img src="https://i.loli.net/2019/07/20/5d33174b6eefc24457.png" alt="秒杀成功"><br><img src="https://i.loli.net/2019/07/20/5d33174b7874972399.png" alt="重复秒杀"><br><img src="https://i.loli.net/2019/07/20/5d33174b92e6928405.png" alt="详情页面流程">  </p><p>我们关注它的核心流程：</p><h4 id="1-客户端进入页面后需要判断是否已经登录（这里使用cookie）："><a href="#1-客户端进入页面后需要判断是否已经登录（这里使用cookie）：" class="headerlink" title="1. 客户端进入页面后需要判断是否已经登录（这里使用cookie）："></a>1. 客户端进入页面后需要判断是否已经登录（这里使用cookie）：</h4><ul><li>先从kookie判断是否有用户标识的手机号码</li><li>有的话下一步，没有填入，然后填写登录（这里没有用到DB），成功后保存该cookie（key-value, expire）</li></ul><h4 id="2-获取服务器系统时间："><a href="#2-获取服务器系统时间：" class="headerlink" title="2. 获取服务器系统时间："></a>2. 获取服务器系统时间：</h4><ul><li>因为不同用户客户端的时间可能不同。需要统一从服务器get。然后与列表页获取到的该商品的秒杀开始结束时间对比。</li><li>未开始的启动计时器；已结束的不再over，进行中的下一步获取暴露接口</li></ul><h4 id="3-获取暴露的秒杀接口："><a href="#3-获取暴露的秒杀接口：" class="headerlink" title="3. 获取暴露的秒杀接口："></a>3. 获取暴露的秒杀接口：</h4><ul><li>这个一般是动态生成的，可以简单对商品id加盐hash即可。</li><li>因为已经属于秒杀时间内了，获取到接口，也包含商品目前信息，即库存量，还有则按钮显示可以秒杀。</li></ul><h4 id="4-执行秒杀："><a href="#4-执行秒杀：" class="headerlink" title="4. 执行秒杀："></a>4. 执行秒杀：</h4><ul><li>执行秒杀需要给服务端提供（商品id, 用户标识phone，接口hash）。</li><li>服务器端对参数验证，如hash是否正确。都🆗执行秒杀操作。减库存+记录用户购买信息。同时按钮变灰，无法再点击。如果重复购买返回错误重复。这些都是封装在个vo/dto中返回即可。</li></ul><hr><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><ul><li>前端：Bootstrap + Jquery + Cookie</li><li>后端：SSM/Spring Boot + MySQL</li><li>模板：Jsp/Thymeleaf + Restful接口</li><li>高并发：缓存Redis + 消息队列MQ + 数据库存储过程procedure</li></ul><hr><h2 id="高并发优化"><a href="#高并发优化" class="headerlink" title="高并发优化"></a>高并发优化</h2><p><img src="https://i.loli.net/2019/07/21/5d34347cb1b9e85353.png" alt="详情页逻辑可优化分析"><br>其中红色的是可以考虑优化的部分</p><h4 id="1-页面静态资源"><a href="#1-页面静态资源" class="headerlink" title="1. 页面静态资源"></a>1. 页面静态资源</h4><ul><li>动静态分离，使用CDN或者Nginx服务器  </li></ul><h4 id="2-系统时间"><a href="#2-系统时间" class="headerlink" title="2. 系统时间"></a>2. 系统时间</h4><ul><li>这里只是一个接口，<em>return new Date().getTime</em>获取系统时间，一般无需优化。  </li></ul><h4 id="3-地址暴露接口"><a href="#3-地址暴露接口" class="headerlink" title="3. 地址暴露接口"></a>3. 地址暴露接口</h4><p><img src="https://i.loli.net/2019/07/21/5d3442668b72a24330.png" alt="redis缓存方式"></p><ul><li>因为秒杀的时候用户会大量重复刷新页面，而这个秒杀商品对象的一些信息存在数据库，如库存开始结束时间。比较后正确才能给他生成暴露接口。反正是操作数据库了，这个可以使用Redis缓存这些秒杀对象信息。一致性维护采用超时缓存即可。因为商品信息基本不会短时间改变。</li><li>具体可见<a href="https://cglzwz.xyz/2019/07/18/redis/redis-hou-duan-huan-cun-liang-da-de-shu-ju-ku-cha-xun/">Redis后端缓存量大的数据库查询</a>  </li></ul><h4 id="4-执行秒杀操作"><a href="#4-执行秒杀操作" class="headerlink" title="4. 执行秒杀操作"></a>4. 执行秒杀操作</h4><p>这是优化的重点<br><img src="https://i.loli.net/2019/07/21/5d34347af057a94216.png" alt="事务执行流程"><br>秒杀这些都是一般两个操作： <strong>减库存</strong> 和 <strong>记录用户购买信息</strong> 。</p><p><img src="https://i.loli.net/2019/07/21/5d3443331f8bd20360.png" alt="单条update压力测试"><br><img src="https://i.loli.net/2019/07/21/5d3443331341127657.png" alt="事务处理分析"><br>但是因为update行级锁的影响，一个事务结束才会释放行级锁。加上网络延时和GC，会很慢。如果实现还是在数据库方面，优化主要是减少事务锁的时间。</p><ul><li>优化方案1： 可以将事务的两个操作交换顺序，因为行级锁是在update操作中的。放到后面不会整个事务时间都独占，可以稍微快点。</li><li>优化方案2： 使用存储过程。把事务的执行移到MySQL服务端执行。可以优化行级锁的持有时间。但是存储过程比较复杂。一般不常用，当然对于逻辑简单秒杀系统来说是可以，用JMeter压力测试可以达到6000QPS。</li><li>优化方案3：如下，使用redis缓存库存，可以使用list，因为pop是原子性的。pop成功则记录用户购买行为以信息形式投放到MQ中，异步削峰，再写入MySQL，用的都是集群。整个过程可以非常快。  </li></ul><p><img src="https://i.loli.net/2019/07/21/5d3434814a39a34274.png" alt="微信抢红包方案">  </p><p>但是也有问题，虽然解决了MySQL事务性强大的替换。但是如果数据修改了，redis的一致性问题难以保证。而且重复秒杀，redis根本不知道，需要另外使用一个NOSQL集群记录谁购买了维护处理。此外如果MQ错误等，都很难回滚解决，等等<br><img src="https://i.loli.net/2019/07/21/5d34347bbb73962692.png" alt="该方案成本分析"></p><p><img src="https://i.loli.net/2019/07/21/5d34347b454b289775.png" alt="优化总结"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.imooc.com/learn/632" target="_blank" rel="noopener">慕课. Java高并发秒杀API之高并发优化</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis后端缓存量大的数据库查询</title>
      <link href="/2019/07/18/redis/redis-hou-duan-huan-cun-liang-da-de-shu-ju-ku-cha-xun/"/>
      <url>/2019/07/18/redis/redis-hou-duan-huan-cun-liang-da-de-shu-ju-ku-cha-xun/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p><img src="https://i.loli.net/2019/07/21/5d341a2367c3511375.png" alt="秒杀优化"><br>在秒杀系统中，红色部分是可以优化的，对于地址暴露接口那块，也就是用户根据id客户端访问查看页面是否可以秒杀了，如果可以秒杀，会暴露一个动态hash接口。所有也是刷新很频繁的。  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Exposer <span class="token function">exportSeckillUrl</span><span class="token punctuation">(</span><span class="token keyword">long</span> seckillId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Seckill seckill <span class="token operator">=</span> seckillDao<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>seckill <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exposer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Date startTime <span class="token operator">=</span> seckill<span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date endTime <span class="token operator">=</span> seckill<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> endTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exposer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> seckillId<span class="token punctuation">,</span> nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 系统时间在秒杀之内，暴露秒杀接口</span>    String md5 <span class="token operator">=</span> <span class="token function">getMD5</span><span class="token punctuation">(</span>seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exposer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> md5<span class="token punctuation">,</span> seckillId<span class="token punctuation">,</span> nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>主要是要访问数据库，获取秒杀对象的信息（开始结束时间，以作判断是否进行），还有验证商品id是否是假的。<br>反正就是对数据库的访问是很大的。  </p><p>可以先让用户去缓存redis找，找不到再去数据库找，数据库找到了的话返回用户后也顺便写入缓存。以后可以去缓找了。一致性维护可以用简单的超时缓存实现。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>把上面的暴露秒杀接口业务从只是从数据库获取改为如下:  </p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> Exposer <span class="token function">exportSeckillUrl</span><span class="token punctuation">(</span><span class="token keyword">long</span> seckillId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先访问redis缓存</span>    Seckill seckill <span class="token operator">=</span> redisDao<span class="token punctuation">.</span><span class="token function">getSeckill</span><span class="token punctuation">(</span>seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>seckill <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 缓存没有，访问数据库获取</span>        seckill <span class="token operator">=</span> seckillDao<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>seckill <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 数据库也没有，假的id</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exposer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 数据库有，存入redis。然后下面操作处理给用户</span>            redisDao<span class="token punctuation">.</span><span class="token function">putSeckill</span><span class="token punctuation">(</span>seckill<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Date startTime <span class="token operator">=</span> seckill<span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date endTime <span class="token operator">=</span> seckill<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> endTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exposer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> seckillId<span class="token punctuation">,</span> nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 系统时间在秒杀之内，暴露秒杀接口</span>    String md5 <span class="token operator">=</span> <span class="token function">getMD5</span><span class="token punctuation">(</span>seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exposer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> md5<span class="token punctuation">,</span> seckillId<span class="token punctuation">,</span> nowTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>思路如上，先去缓存找，没有再去数据库，数据库没有就是不存在了。有的话写入缓存。然后再处理返回给用户。</p><p>Redis操作实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>dyuproject<span class="token punctuation">.</span>protostuff<span class="token punctuation">.</span>LinkedBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>dyuproject<span class="token punctuation">.</span>protostuff<span class="token punctuation">.</span>ProtostuffIOUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>dyuproject<span class="token punctuation">.</span>protostuff<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>RuntimeSchema<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPool<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>cglzwz<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Seckill<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * redis操作 * @author chgl16 * @date 2019/7/21 14:50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> JedisPool jedisPool<span class="token punctuation">;</span>    <span class="token keyword">private</span> RuntimeSchema<span class="token operator">&lt;</span>Seckill<span class="token operator">></span> schema <span class="token operator">=</span> RuntimeSchema<span class="token punctuation">.</span><span class="token function">createFrom</span><span class="token punctuation">(</span>Seckill<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RedisDao</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从redis里获取Seckill的byte[]，反序列化     * @param seckillId     * @return     */</span>    <span class="token keyword">public</span> Seckill <span class="token function">getSeckill</span><span class="token punctuation">(</span><span class="token keyword">long</span> seckillId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从池子获取一个连接</span>            Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 构建存储表示的key</span>                String key <span class="token operator">=</span> <span class="token string">"seckill:"</span> <span class="token operator">+</span> seckillId<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 采用比jdk提供的Serializable接口高效的序列化和反序列化</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 缓存获取到</span>                    <span class="token comment" spellcheck="true">// 创建一个空对象</span>                    Seckill seckill <span class="token operator">=</span> schema<span class="token punctuation">.</span><span class="token function">newMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 把数据赋予到空对象中</span>                    ProtostuffIOUtil<span class="token punctuation">.</span><span class="token function">mergeFrom</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> seckill<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> seckill<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * redis中没有，把seckill对象序列化成字节数组发送到redis     * @param seckill     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">putSeckill</span><span class="token punctuation">(</span>Seckill seckill<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 构造key</span>                String key <span class="token operator">=</span> <span class="token string">"seckill:"</span> <span class="token operator">+</span> seckill<span class="token punctuation">.</span><span class="token function">getSeckillId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 序列化对象</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> ProtostuffIOUtil<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span>seckill<span class="token punctuation">,</span> schema<span class="token punctuation">,</span>                        LinkedBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>LinkedBuffer<span class="token punctuation">.</span>DEFAULT_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 一致性解决方案：超时缓存 1h</span>                <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 缓存到redis，result为操作成功失败提示</span>                String result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>整合Spring的话注入一下bean，因为属性jedisPool只能构造注入完成初始化。可以如下</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 构造注入redis，完成属性注入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redisDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.cglzwz.cache.RedisDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>127.0.0.1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6379<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol><li>使用Jedis客户端，从JedisPool中getResource()获取一个连接。然后进行操作。</li><li>这里的key-value都是String，但是对连接redis操作都需要改为byte[]，Redis的String是二进制安全的，对Java对象的序列化存储也很好。</li><li>这里使用的序列化方法不是jdk提供的Serializable接口，而是使用高效的protostuff，压缩率和速度更快，因此对并发更好。反序列化的过程是先创建一个空对象（没有属性值），然后用schema将从缓存中获取到的序列化的对象bytes赋进去。</li></ol><p>依赖:</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 5. redis相关--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 高效的序列化和反序列化 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dyuproject.protostuff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protostuff-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dyuproject.protostuff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protostuff-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>这里的一致性处理采用的是超时缓存。这种适合那种秒杀商品，数据库对应的信息很少改动。所有即便超时（这里设置了一个小时）从缓存删去，再从数据库获取更新到缓存也是可以接受的。也是维护一致性非常常用和简单的一种策略方案。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化与反序列化 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring声明式事务</title>
      <link href="/2019/07/14/spring/spring-sheng-ming-shi-shi-wu/"/>
      <url>/2019/07/14/spring/spring-sheng-ming-shi-shi-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring声明式事务"><a href="#Spring声明式事务" class="headerlink" title="Spring声明式事务"></a>Spring声明式事务</h2><p><img src="https://img.mukewang.com/5d1577a7000126cc12800720.jpg" alt="使用方式">  </p><p>事务是对于多个SQL执行才有必要，一个就算了。推荐使用第三种@Transactional，毕竟事务声明是很严谨重要的点。这个可读性等更好。</p><h2 id="注解声明配置方式"><a href="#注解声明配置方式" class="headerlink" title="注解声明配置方式"></a>注解声明配置方式</h2><p>spring-service.xml  </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.cglzwz.service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 基于注解的声明式事务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="Spring声明事务回滚"><a href="#Spring声明事务回滚" class="headerlink" title="Spring声明事务回滚"></a>Spring声明事务回滚</h2><p>Spring声明事务回滚的默认情况是 <strong>抛出运行期异常</strong></p><h2 id="事务的嵌套传播"><a href="#事务的嵌套传播" class="headerlink" title="事务的嵌套传播"></a>事务的嵌套传播</h2><p>多个事务嵌套，当内/外回滚提交都出现的时候，不同情况有不同结果。现在暂时没打理。这个也和事务隔离级别有关，MySQL默认是可重复读。<br><a href="http://xiaorui.cc/2017/01/14/%E8%AE%A9%E4%BA%BA%E6%97%A0%E8%AF%AD%E7%9A%84mysql%E5%B5%8C%E5%A5%97%E4%BA%8B%E5%8A%A1/" target="_blank" rel="noopener">一个博主的分享</a>。<br>这里内层事务一旦start transaction就强制前面的外层事务提交了。</p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p><a href="https://www.jianshu.com/p/4e3edbedb9a8" target="_blank" rel="noopener">简书一个博客</a>待验证。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL表锁行锁</title>
      <link href="/2019/07/13/mysql/mysql-xing-suo-biao-suo/"/>
      <url>/2019/07/13/mysql/mysql-xing-suo-biao-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>MySQL Innodb支持行锁，而MyISAM只支持表锁。这两种主要是粒度的差别。锁是事务的关键保证。</p><ul><li>表锁：<br>开销小实现简单，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li><li>行锁：<br>开销大实现复杂，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高<blockquote><p>当然还有介于两者之间的页锁。性质也居中。</p></blockquote></li></ul><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><p>MySQL的表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）<br>一般是SELECT加共享锁，而INSERT, UPDATE, DELETE加独占锁</p><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p>行锁是根据索引实现的<br>1.行锁必须有索引才能实现，否则会自动锁全表，那么就不是行锁了。<br>2.两个事务不能锁同一个索引。  </p><p>例如：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 事务A先执行：  </span><span class="token keyword">select</span> math <span class="token keyword">from</span> zje <span class="token keyword">where</span> math<span class="token operator">></span><span class="token number">60</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 事务B再执行：  </span><span class="token keyword">select</span> math <span class="token keyword">from</span> zje <span class="token keyword">where</span> math<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">for</span> <span class="token keyword">update</span>；</code></pre><p>都是使用了math索引，A先的话，事务B会被阻塞，事务B换成其他索引就不会阻塞，都是还是不能有重复交接的行，不然还是阻塞。</p><p>又比如商品秒杀或者抢红包的时候，对库存数量做如下操作</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> t_seckill <span class="token keyword">SET</span> num <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">AND</span> num <span class="token operator">></span> <span class="token number">0</span></code></pre><p>id作为索引，不同终端的事务都对其修改的话，因为是同一个索引，同一条记录，这里都是串行的。大量阻塞。这也是高并发需要优化的重点。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/mysteryhaohao/article/details/51669741" target="_blank" rel="noopener">MySQL学习之——锁(行锁、表锁、页锁、乐观锁、悲观锁等)</a> </li><li><a href="https://blog.csdn.net/nicajonh/article/details/78814987" target="_blank" rel="noopener">行锁与表锁详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中文乱码</title>
      <link href="/2019/07/11/mysql/mysql-zhong-wen-luan-ma/"/>
      <url>/2019/07/11/mysql/mysql-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="插入乱码"><a href="#插入乱码" class="headerlink" title="插入乱码"></a>插入乱码</h2><p>即便数据库和表如下utf8编码配置</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>db_name<span class="token punctuation">`</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER SET</span> utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>tb_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span></code></pre><p>这样INSERT INTO <code>tb_name</code>..依然中文乱码  </p><p>SQLException: /xx /xx这种</p><p>如下可以查看内部编码：</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> show variables like <span class="token string">'%character%'</span><span class="token punctuation">;</span>+--------------------------+----------------------------------------+<span class="token operator">|</span> Variable_name            <span class="token operator">|</span> Value                                  <span class="token operator">|</span>+--------------------------+----------------------------------------+<span class="token operator">|</span> character_set_client     <span class="token operator">|</span> gbk                                    <span class="token operator">|</span><span class="token operator">|</span> character_set_connection <span class="token operator">|</span> gbk                                    <span class="token operator">|</span><span class="token operator">|</span> character_set_database   <span class="token operator">|</span> utf8                                   <span class="token operator">|</span><span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> binary                                 <span class="token operator">|</span><span class="token operator">|</span> character_set_results    <span class="token operator">|</span> gbk                                    <span class="token operator">|</span><span class="token operator">|</span> character_set_server     <span class="token operator">|</span> utf8mb4                                <span class="token operator">|</span><span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8                                   <span class="token operator">|</span><span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> G:\mysql-8.0.16-winx64\share\charsets\ <span class="token operator">|</span>+--------------------------+----------------------------------------+8 rows <span class="token keyword">in</span> set, 1 warning <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>可以暂时修改，但是仅限本session有效，当然可以SET global char…，但是重启服务就没了。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> character_set_client<span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>长期有效要改数据库配置文件，my.ini之类在安装目录是没有的，网上又说在C盘的数据区的，但是找不到。</p><p>最后发现在Windows上的高版本MySQL，解决中文乱码，真的只能在根目录下创建一个默认被识别的my.ini配置文件，在里面做根本配置。如下<br>my.ini</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server<span class="token operator">=</span>utf8<span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8</code></pre><p>重启服务即可成功</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="https://www.cnblogs.com/reyinever/p/8551977.html" target="_blank" rel="noopener">Windows安装Mysql</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志采集系统思路</title>
      <link href="/2019/07/10/za-ji/ri-zhi-cai-ji-xi-tong-si-lu/"/>
      <url>/2019/07/10/za-ji/ri-zhi-cai-ji-xi-tong-si-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>服务器上的日志会实时生成，争对这些日志记录，有些有用的数据需要采集记录入库。因此有很多思路方案。</p><h3 id="1-ELK"><a href="#1-ELK" class="headerlink" title="1. ELK"></a>1. ELK</h3><p>这个很常见。是 Elasticsearch、Logstash 和 Kibana 三种软件产品的首字母缩写。这三者都是开源软件，通常配合使用</p><ul><li>Elasticsearch：分布式搜索和分析引擎，具有高可伸缩、高可靠和易管理等特点。基于 Apache Lucene 构建，能对大容量的数据进行接近实时的存储、搜索和分析操作。通常被用作某些应用的基础搜索引擎，使其具有复杂的搜索功能；</li><li>Logstash：数据收集引擎。它支持动态的从各种数据源搜集数据，并对数据进行过滤、分析、丰富、统一格式等操作，然后存储到用户指定的位置；</li><li>Kibana：数据分析和可视化平台。通常与 Elasticsearch 配合使用，对其中数据进行搜索、分析和以统计图表的方式展示；</li></ul><h3 id="2-Filebeat-Kafka-Logstash"><a href="#2-Filebeat-Kafka-Logstash" class="headerlink" title="2. Filebeat + Kafka + Logstash"></a>2. Filebeat + Kafka + Logstash</h3><p>其实Filebeat也算是ELK 协议栈的新成员，一个轻量级开源日志文件数据搜集器，基于 Logstash-Forwarder 源代码开发，是对它的替代。在需要采集日志数据的 server 上安装 Filebeat，并指定日志目录或日志文件后，Filebeat 就能读取数据，迅速发送到 Logstash 进行解析，亦或直接发送到 Elasticsearch 进行集中式存储和分析。  </p><p>Filebeat的输入是本机的日志文件，不能远程主机作为输入的，入侵式是它的一个弊端。但是体量很轻量。支持多平台。输出模型很多。可以接Kafka，也可以是直接的Elasticsearch（默认）或者Logstash等等。  </p><p>这里是将Filebeat输出作为Kafka的生产者者，对应topic的消费者接到Logstash做数据正则截取过滤，然后再输出到下一个节点操作。Filebeat每30秒一次心跳。会将新生成日志（上次尾行之后）的一次打包为一个大json输出。里面也会添加很多自身的一些属性，日志都在message属性里，是个串。但是Filebeat每次不能发送最后一行。是个缺陷。</p><p>这些都可以做集群，不同的日志文件运行多个Filebeat也可以已，分别制定不同的配置文件即可。输出集群提供更友好，直接host: [ip1: port, ip2:port2….]</p><h3 id="3-HDFS-Hive"><a href="#3-HDFS-Hive" class="headerlink" title="3. HDFS + Hive"></a>3. HDFS + Hive</h3><p>先将日志文件拉入HDFS，做关联批量插入Hive，对大文件，大数据查询更优秀</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志采集 </tag>
            
            <tag> Filebeat </tag>
            
            <tag> Kafka </tag>
            
            <tag> Logstash </tag>
            
            <tag> HDFS </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis结合Spring的一些回顾</title>
      <link href="/2019/07/05/spring/mybatis-jie-he-spring-hui-gu/"/>
      <url>/2019/07/05/spring/mybatis-jie-he-spring-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis结合Spring"><a href="#MyBatis结合Spring" class="headerlink" title="MyBatis结合Spring"></a>MyBatis结合Spring</h2><blockquote><p>好久没打这代码了，回顾一下。  </p></blockquote><p>两者整合不仅可以减少代码量，减少配置。也可以保持MyBatis的灵活性。</p><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1. 依赖"></a>1. 依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这个整合依赖是MyBatis社区提供的，Spring只是为了早期的Batis提供了整合依赖。现在好像还有MyBatis-Plus了..</p><h3 id="2-mybatis-config-xml"><a href="#2-mybatis-config-xml" class="headerlink" title="2. mybatis-config.xml"></a>2. mybatis-config.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置全局属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 插入获取自增主键 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用列别名替代列名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用驼峰映射 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据源连接池、类型别名typeAliases、mappers映射器位置等由Spring整合 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>这是最简化的MyBatis的全局配置文件，只是配了几个常用的setting。数据库，别名，mapper映射器位置这些都留给Spring整合了。</p><h3 id="3-XxxDao-xml"><a href="#3-XxxDao-xml" class="headerlink" title="3. XxxDao.xml"></a>3. XxxDao.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.cglzwz.dao.SeckillDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reduceNumber<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- xml会解析&lt;为语法，因此可以用&lt;!CDATA[]]>免除 --></span>        UPDATE `t_seckill` SET `number` = `number` - 1            WHERE `seckill_id` = #{seckillId} AND `number` > 0                AND `start_time` <span class="token cdata">&lt;![CDATA[ &lt;= ]]></span> #{killTime}                AND `end_time` >= #{killTime}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Seckill<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT `seckill_id`, `name`, `number`, `start_time`, `end_time`,            `create_time` FROM `t_seckill`            WHERE `seckill_id` = #{seckillId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Seckill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT `seckill_id`, `name`, `number`, `start_time`, `end_time`,            `create_time` FROM `t_seckill`            ORDER BY `create_time` DESC            LIMIT #{offset}, #{limit}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>mapper是其实算是只要写接口，不用实现类的实现类了。有点拗口。<br>比如：</p><pre class=" language-java"><code class="language-java">   Seckill <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token keyword">long</span> seckillId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 结果集    行为           参数      */</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Seckill<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT `seckill_id`, `name`, `number`, `start_time`, `end_time`,            `create_time` FROM `t_seckill`            WHERE `seckill_id` = #{seckillId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>这种Dao接口的一个方法，MyBatis是底层封装了JDBC，不用写这个的实现是因为我们这个mapper的这个就相当于实现了，类似JDBC，有了参数，PreparedStatement行为就是SQL，返回值就是结果集ResultSet，信息完整了，可以交给底层JDBC实现。</p><p>此外由Spring 接管这些mapper，是可以直接生成对应DAO的实现类自动注入IOC的。</p><h3 id="4-spring-dao-xml整合"><a href="#4-spring-dao-xml整合" class="headerlink" title="4. spring-dao.xml整合"></a>4. spring-dao.xml整合</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置整合MyBatis过程 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1. 数据库参数，propertis属性：${username} --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2. 连接池 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置连接池属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- c3p0连接池的私有属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭连接后不自动commit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoCommitOnClose<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 获取连接超时时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 获取连接失败可以重试次数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置SqlSessionFactory对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置MyBatis全局配置文件:mybatis-config.xml --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 扫描entity包，使用别名，对应namespace简化 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.cglzwz.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 扫描映射器mapper.xml文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，并注入Spring容器中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入sqlSessionFactory --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 给出扫描Dao接口包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.cglzwz.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>数据库信息和连接池是标配的，核心是sqlSessionFactory和Dao实现注入。这些class都是mybatis-spring整合依赖提供。平时基本是约定习惯大于配置。这些包扫描路径都是习惯约定。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ol><li><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener">MyBatis官方中文文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL查询分月计算总销量</title>
      <link href="/2019/07/04/sql/sql-cha-xun-fen-yue-ji-suan-zong-xiao-liang/"/>
      <url>/2019/07/04/sql/sql-cha-xun-fen-yue-ji-suan-zong-xiao-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="分别统计每个月份的数量和"><a href="#分别统计每个月份的数量和" class="headerlink" title="分别统计每个月份的数量和"></a>分别统计每个月份的数量和</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span>                                 <span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> <span class="token keyword">date</span>                <span class="token operator">|</span> num  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">200</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">200</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">600</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">500</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+------+</span><span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><h2 id="方法1，使用MONTH-date-、YEAR-date-、SUM-num-内置函数"><a href="#方法1，使用MONTH-date-、YEAR-date-、SUM-num-内置函数" class="headerlink" title="方法1，使用MONTH(date)、YEAR(date)、SUM(num)内置函数"></a>方法1，使用MONTH(date)、YEAR(date)、SUM(num)内置函数</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> month<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 月份<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">as</span> 总量 <span class="token keyword">from</span> t1 <span class="token keyword">where</span> year<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'2019'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> month<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token comment" spellcheck="true">--------+--------+</span><span class="token operator">|</span> 月份   <span class="token operator">|</span> 总量   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+--------+</span><span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">300</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>    <span class="token number">200</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>    <span class="token number">600</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span>    <span class="token number">500</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+--------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><h2 id="方法2，-使用case关键字"><a href="#方法2，-使用case关键字" class="headerlink" title="方法2， 使用case关键字"></a>方法2， 使用case关键字</h2>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL各种多表连接</title>
      <link href="/2019/07/02/mysql/mysql-ge-chong-duo-biao-lian-jie/"/>
      <url>/2019/07/02/mysql/mysql-ge-chong-duo-biao-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对两个表进行连接操作时，根据不同的需要，选择不同的连接方式。</p><h3 id="1-交叉连接"><a href="#1-交叉连接" class="headerlink" title="1. 交叉连接"></a>1. 交叉连接</h3><p>这个比较普遍简单，如果要列出两个表所有记录的所有连接组合，使用交叉连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1<span class="token punctuation">,</span> tb2</code></pre><h3 id="2-自然连接"><a href="#2-自然连接" class="headerlink" title="2. 自然连接"></a>2. 自然连接</h3><p>如果要列出两个表中所有同名字段相等的记录，并且去除重复字段，使用自然连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1 <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> tb2<span class="token punctuation">;</span></code></pre><h3 id="3-内连接"><a href="#3-内连接" class="headerlink" title="3. 内连接"></a>3. 内连接</h3><p>如果要对满足条件的记录进行连接，使用 θ-连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> tb2 <span class="token keyword">on</span> condition<span class="token punctuation">;</span></code></pre><h3 id="4-外连接"><a href="#4-外连接" class="headerlink" title="4. 外连接"></a>4. 外连接</h3><p>外连接分为外左连接和外右连接<br>如果既要列出两表相匹配的记录，<strong>同时又要列出没有匹配项的记录</strong>，使用外连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1 <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tb2<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1 <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tb2<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL时间正常，插入记录小8个小时</title>
      <link href="/2019/06/30/mysql/mysql-shi-jian-zheng-chang-cha-ru-ji-lu-xiao-8-ge-xiao-shi/"/>
      <url>/2019/06/30/mysql/mysql-shi-jian-zheng-chang-cha-ru-ji-lu-xiao-8-ge-xiao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>插入DATETIME或者TIMESTAMP类型的字段。Java程序的时间正常，MySQL数据库时间SELECT NOW();也是正常的。但是插入后小8个小时。</p><p>不知道是不是高版本MySQL的问题。毕竟程序和数据库自身的时间都是正常的。估计是URL问题，使用的是UTC，小八个时区。但是以往都没有问题。    </p><pre class=" language-bash"><code class="language-bash">url <span class="token operator">=</span> jdbc:mysql:///db?serverTimezone<span class="token operator">=</span>UTC</code></pre><p>UTC是协调世界时间时，就是0经度时间，所有我们东八区快8个小时。但是之前好像没有问题。网上说改time_zone变量测试没用。  </p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><pre class=" language-bash"><code class="language-bash">url <span class="token operator">=</span> jdbc:mysql:///db?serverTimezone<span class="token operator">=</span>Asia/Shanghai</code></pre><p>就这样一步就可以了。</p><p>测试了配置全局的</p><pre class=" language-xml"><code class="language-xml">default-time-zone = '+8:00'</code></pre><p>没有意义</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL explain的使用和查看介绍</title>
      <link href="/2019/06/28/mysql/mysql-explain-sql/"/>
      <url>/2019/06/28/mysql/mysql-explain-sql/</url>
      
        <content type="html"><![CDATA[<h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 建表</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token punctuation">(</span>    <span class="token operator">-</span><span class="token operator">></span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">date</span> <span class="token keyword">timestamp</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> num <span class="token keyword">bigint</span><span class="token punctuation">)</span><span class="token keyword">Engine</span><span class="token operator">=</span><span class="token keyword">Innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 记录</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> <span class="token keyword">date</span>                <span class="token operator">|</span> num  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">200</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">200</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">600</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>  <span class="token number">500</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+------+</span><span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- sql查询情况</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>     <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> const <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>       <span class="token operator">|</span> <span class="token keyword">PRIMARY</span> <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><ol><li>id：是序号，只有1表示这个SQL里面直接执行了1个SQL而已，有点拗口。如果里面是有子查询等，就有多个记录了</li><li>select_type：SIMPLE(简单SELECT,不使用UNION或子查询等)，还有很多。</li><li>table：是查看操作的表</li><li><strong>type</strong>: 这个很重要，可以看出是否使用了索引之类的。ALL, index,  range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好，右边可以说是包括了左边的）</li><li>possible_key：可能用到的索引</li><li>key：实际用到的索引，这里是主键索引</li><li>key_len：索引长度字节数，这里是int</li><li>ref：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li><li><strong>rows</strong>： 表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</li><li>filtered: 一个百分比的值，和rows 列的值一起使用，可以估计出查询执行计划(QEP)中的前一个表的结果集，从而确定join操作的循环次数。小表驱动大表，减轻连接的次数。</li><li>Extra:</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java枚举</title>
      <link href="/2019/06/26/java/java-mei-ju/"/>
      <url>/2019/06/26/java/java-mei-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p>有些情况下某些对象或者属性的值数量是有限固定的。比如季节，响应状态。是可以一一列举的。对比直接使用常量，枚举更好的封装，可读性和可维护性更好。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li>一个星期  </li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义一个星期的枚举类</span><span class="token keyword">public</span> <span class="token keyword">enum</span> WeekEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在第一行显式地列出7个枚举实例(枚举值)，系统会自动添加 public static final 修饰</span>    SUNDAY<span class="token punctuation">,</span> MONDAY<span class="token punctuation">,</span> TUESDAY<span class="token punctuation">,</span> WEDNESDAY<span class="token punctuation">,</span> THURSDAY<span class="token punctuation">,</span> FRIDAY<span class="token punctuation">,</span> SATURDAY<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ol start="2"><li>状态响应  </li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>cglzwz<span class="token punctuation">.</span>enums<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> SeckillStatusEnum <span class="token punctuation">{</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"秒杀成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">END</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"秒杀结束"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REPERT_KILL</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"重复秒杀"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DATA_REWRITE</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"数据篡改"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">INNER_ERROR</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"系统异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token keyword">private</span> String statusInfo<span class="token punctuation">;</span>    <span class="token function">SeckillStatusEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> String statusInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusInfo <span class="token operator">=</span> statusInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getStatusInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SeckillStatusEnum seckillStatusEnum <span class="token operator">:</span> SeckillStatusEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>seckillStatusEnum<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> status<span class="token punctuation">)</span>                <span class="token keyword">return</span> seckillStatusEnum<span class="token punctuation">.</span>statusInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getStatusInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> statusInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatusInfo</span><span class="token punctuation">(</span>String statusInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusInfo <span class="token operator">=</span> statusInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>这里的每个枚举成员都有带参，因此要先定义好对应的构造函数，参数列别要一至。不然报错。<br>XxxEnum.values() 返回一个包含全部枚举值的数组，可以用来遍历所有枚举值;</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jianshu.com/p/46dbd930f6a2" target="_blank" rel="noopener">简书. Java 中的枚举 (enum)</a></li><li><a href="https://blog.csdn.net/qq_27093465/article/details/52180865" target="_blank" rel="noopener">CSDN. Java 枚举(enum) 详解7种常见的用法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.x高版本MySQL连接配置</title>
      <link href="/2019/06/26/mysql/gao-ban-ben-mysql-lian-jie-pei-zhi/"/>
      <url>/2019/06/26/mysql/gao-ban-ben-mysql-lian-jie-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="driver"><a href="#driver" class="headerlink" title="driver"></a>driver</h2><p>高版本的依赖是</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-yaml"><code class="language-yaml">driver=com.mysql.cj.jdbc.Driver</code></pre><p>中间多了个cj的包</p><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><pre class=" language-yaml"><code class="language-yaml">url=jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/db<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;serverTimezone</span>=UTC</code></pre><p>比如加服务器时间标准类型，不然运行报错。<br>com.mysql.cj.core.exceptions.<em>InvalidConnectionAttributeException: The server time zone value ‘?й???????’</em></p><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>用户不要写出username。因为在Spring获取jdbc.properties的时候，使用的是 <em>${user}</em>，使用 ${username} 会获取到系统用户名，一个小bug</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用MD5加密</title>
      <link href="/2019/06/25/java/java-shi-yong-md5-jia-mi/"/>
      <url>/2019/06/25/java/java-shi-yong-md5-jia-mi/</url>
      
        <content type="html"><![CDATA[<p>使用到了spring的一个工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>DigestUtils<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MD5Test</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String slat <span class="token operator">=</span> <span class="token string">"xafd65!@#$%6"</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        String base <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> slat<span class="token punctuation">;</span>        String md5 <span class="token operator">=</span> DigestUtils<span class="token punctuation">.</span><span class="token function">md5DigestAsHex</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>封装一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String slat <span class="token operator">=</span> <span class="token string">"@#$%XCDFFASAVDA56asdfaf"</span><span class="token punctuation">;</span><span class="token keyword">private</span> String <span class="token function">getMD5</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String base <span class="token operator">=</span> message <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> slat<span class="token punctuation">;</span>    String md5 <span class="token operator">=</span> DigestUtils<span class="token punctuation">.</span><span class="token function">md5DigestAsHex</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> md5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Thrift初识</title>
      <link href="/2019/06/24/thrift/thrift-chu-shi/"/>
      <url>/2019/06/24/thrift/thrift-chu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Thrift"><a href="#Apache-Thrift" class="headerlink" title="Apache Thrift"></a>Apache Thrift</h2><p>Facebook开发的，一个RPC通讯的王者。比XML，JSON传输更优秀。基于一个Socket。    </p><p>xx.thrift是其文件格式，里面是对接口方法的描写，需要本地编译成xx.java接口文件。所以需要安装一些编译原理的词法语法语义环境的工具，比如flex，bison等等。    </p><p>本地的IDEA可以安装这个Thrift插件，把xx.thrift编译为xx.java接口。<br>然后，写一个需要传输的类实现这个接口就可以了。启动Thrift服务端，就类似于ServerSocket，然后本地客户端可以连接，调用访问里面的方法。</p><h2 id="REST-VS-RPC"><a href="#REST-VS-RPC" class="headerlink" title="REST VS RPC"></a>REST VS RPC</h2><p>其实个人感觉REST也是一种RPC，只是其协议是HTTP。但是RPC框架底层协议除了有socket，管道之类的也有HTTP。感觉RPC是个父集合一样。</p>]]></content>
      
      
      <categories>
          
          <category> Thrift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
            <tag> Thrift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调参和GC日志简记</title>
      <link href="/2019/06/20/jvm/jvm-diao-can-he-gc-ri-zhi/"/>
      <url>/2019/06/20/jvm/jvm-diao-can-he-gc-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="垃圾回收内存分配"><a href="#垃圾回收内存分配" class="headerlink" title="垃圾回收内存分配"></a>垃圾回收内存分配</h2><p><img src="https://i.loli.net/2019/06/20/5d0b46f5876bf87452.png" alt="垃圾回收内存区">  </p><h4 id="1-Minor-GC"><a href="#1-Minor-GC" class="headerlink" title="1. Minor GC"></a>1. Minor GC</h4><p>&emsp;&emsp;当Eden区满的时候回触发一次Minor GC（Survivor区满不会）。这次GC仅仅回收年轻代。<br>&emsp;&emsp;使用的是复制算法，就是把Eden和Survivor1中存活的对象复制到Survivor2上，然后清空。(可以肯定的是Eden区的对象没了。Survivor1和和Survivor2可能来回copy)<br>&emsp;&emsp;每进行一次Minor GC（年轻代回收），对象的年龄就增加1岁（初始为0），当年龄增加到一定程度（默认15岁），就会被移到老年代。  </p><h4 id="2-Full-GC"><a href="#2-Full-GC" class="headerlink" title="2. Full GC"></a>2. Full GC</h4><ul><li>当年老代满时会引发Full GC，Full GC将会同时回收年轻代、年老代  </li><li>当永久（方法区）代满时也会引发Full GC，会导致Class、Method元信息的卸载  </li></ul><h2 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">;</span>        b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译这个简单的案例，执行</p><pre class=" language-bash"><code class="language-bash">$ java -Xms20M -Xmx21M -Xmn10M  -XX:SurvivorRatio<span class="token operator">=</span>8 -XX:+PrintGCDetails Test1</code></pre><pre class=" language-bash"><code class="language-bash">Heap PSYoungGen      total 9216K, used 7456K <span class="token punctuation">[</span>0x00000000ff600000, 0x0000000100000000, 0x0000000100000000<span class="token punctuation">)</span>  eden space 8192K, 91% used <span class="token punctuation">[</span>0x00000000ff600000,0x00000000ffd48038,0x00000000ffe00000<span class="token punctuation">)</span>  from space 1024K, 0% used <span class="token punctuation">[</span>0x00000000fff00000,0x00000000fff00000,0x0000000100000000<span class="token punctuation">)</span>  to   space 1024K, 0% used <span class="token punctuation">[</span>0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000<span class="token punctuation">)</span> ParOldGen       total 10240K, used 4096K <span class="token punctuation">[</span>0x00000000fea00000, 0x00000000ff400000, 0x00000000ff600000<span class="token punctuation">)</span>  object space 10240K, 40% used <span class="token punctuation">[</span>0x00000000fea00000,0x00000000fee00010,0x00000000ff400000<span class="token punctuation">)</span> Metaspace       used 2626K, capacity 4486K, committed 4864K, reserved 1056768K  class space    used 281K, capacity 386K, committed 512K, reserved 1048576K</code></pre><ol><li><em>-verbose:gc</em> 或者 <em>-XX:+PrintGC</em> 都可以输出GC简要信息。 <em>-XX:+PrintGCDetails</em> 可以打印详细信息。</li><li><em>-Xms20M</em> 是初始化堆的大小为20M，<em>-Xmx21M</em> 是堆最大是21M，<em>-Xmn10M</em> 是年轻代分配10M  </li><li><em>-XX:SurvivorRatio=8</em> 是指新生代Eden区:一个Survivor = 8，（两个Survivor大小一样）。默认是8，则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。调小这个参数将增大survivor区，让对象尽量在survitor区呆长一点，减少进入年老代的对象。去掉救助空间的想法是让大部分不能马上回收的数据尽快进入年老代，加快年老代的回收频率，减少年老代暴涨的可能性，这个是通过将-XX:SurvivorRatio 设置成比较大的值（比如65536)来做到。</li></ol><p>&emsp;&emsp;从打印情况可以看出各个区的大小，以及使用情况。from对应Survivor1, to是Survivor2。这里没有GC(Minor GC)过。因为那个<em>new byte[6 </em> MB]<em> 大对象直接被初始化到老年代去了，所以年轻代够用。可以使用 </em>System.gc()* 建议触发一次GC<br>&emsp;&emsp;不知道为啥PSYougGen的total才9216K(1024x9)，而后面的eden，from，to加起来刚刚好10M</p><blockquote><p>这里我们配置的10M用的是直接的1024，就是相对于2进制对2进制了。<br>因为平时人们会把1024当做1000，比如储存SD卡就是，4GB说的是用了1000替换的后的角度的，所以再变为二进制就小了，4GB（1000视角）= 4 <em> 1000 </em> 1000B = 4 <em> 1000 </em> 1000 / 1024 / 1024G = 3.814，然后卡系统分区占用了些，就大概剩下3.6GB（1024视角）</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.ityouknow.com/jvm/2017/09/18/GC-Analysis.html" target="_blank" rel="noopener">Jvm 系列(五):Java GC 分析 . 纯洁的微信</a></li><li><a href="https://blog.csdn.net/chen77716/article/details/5695893" target="_blank" rel="noopener">JVM性能调优 . 纯粹的码农 . CSDN</a></li><li><a href="https://www.jianshu.com/p/1045d8a24765" target="_blank" rel="noopener">JVM垃圾回收机制入门 . 简书</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储引擎MyISAM和InnoDB的区别</title>
      <link href="/2019/06/18/mysql/myisam-he-innodb-de-qu-bie/"/>
      <url>/2019/06/18/mysql/myisam-he-innodb-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">MyISAM</th><th style="text-align:center">InnoDB</th></tr></thead><tbody><tr><td style="text-align:center">不支持事务</td><td style="text-align:center">支持事务</td></tr><tr><td style="text-align:center">不支持外键</td><td style="text-align:center">支持外键</td></tr><tr><td style="text-align:center">只有表级锁</td><td style="text-align:center">有默认的行级锁，粒度小，并发更优</td></tr><tr><td style="text-align:center">支持全文索引</td><td style="text-align:center">5.6后开始支持</td></tr><tr><td style="text-align:center">表记录数count(*)有专门的计数器</td><td style="text-align:center">select * 逐条计算</td></tr><tr><td style="text-align:center">SELECT查询更优</td><td style="text-align:center">INSERT、UPDATE更优</td></tr><tr><td style="text-align:center">非聚集索引</td><td style="text-align:center">聚集索引</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片分类批量测试</title>
      <link href="/2019/06/16/tensorflow/tu-pian-fen-lei-pi-liang-ce-shi/"/>
      <url>/2019/06/16/tensorflow/tu-pian-fen-lei-pi-liang-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h2><p>保存了模型后，需要对模型测试，图片集路径为</p><pre class=" language-python"><code class="language-python">path <span class="token operator">=</span> <span class="token string">'../data/*.jpg'</span></code></pre><p>导入模型后，测试的原理就是替换，把训练的图片改为测试的图片。<br>模型中还报错了最后一个全连接层的输出logits，把其从模型中读取出来，更改图片，再运行模型几个得出结果。</p><blockquote><p>测试集图片命名按照路飞<em>1xx.jpg</em>，罗宾<em>2xx.jpg</em>…<br>就是打个标签而已，<em>paths[i][-7:]</em> 读取出1,2,3…，和模型结果对比即可。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> skimage <span class="token keyword">import</span> io<span class="token punctuation">,</span>transform<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> globpath <span class="token operator">=</span> <span class="token string">'../data/*.jpg'</span>image_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'路飞'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'罗宾'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'娜美'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">'乔巴'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">'索隆'</span><span class="token punctuation">}</span>w<span class="token operator">=</span><span class="token number">100</span>h<span class="token operator">=</span><span class="token number">100</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token keyword">def</span> <span class="token function">read_one_image</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    img <span class="token operator">=</span> transform<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 目录列表</span>    paths <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">for</span> img <span class="token keyword">in</span> paths<span class="token punctuation">:</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>read_one_image<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span>    saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>import_meta_graph<span class="token punctuation">(</span><span class="token string">'../../finalmodel/rate_07_model/model.ckpt.meta'</span><span class="token punctuation">)</span>    saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>latest_checkpoint<span class="token punctuation">(</span><span class="token string">'../../finalmodel/rate_07_model/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    graph <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> graph<span class="token punctuation">.</span>get_tensor_by_name<span class="token punctuation">(</span><span class="token string">"x:0"</span><span class="token punctuation">)</span>    feed_dict <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span>data<span class="token punctuation">}</span>    logits <span class="token operator">=</span> graph<span class="token punctuation">.</span>get_tensor_by_name<span class="token punctuation">(</span><span class="token string">"logits_eval:0"</span><span class="token punctuation">)</span>    classification_result <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>logits<span class="token punctuation">,</span>feed_dict<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打印出预测矩阵</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n预测矩阵:\n"</span><span class="token punctuation">,</span> classification_result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打印出预测矩阵每一行最大值的索引</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n简略结果:\n"</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>classification_result<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"具体情况: "</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#根据索引通过字典对应人物的分类</span>    output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    output <span class="token operator">=</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>classification_result<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># output[i]是测试结果编码，paths[i])[-7]是原定图片编号（路飞1）</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> str<span class="token punctuation">(</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第 "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">" 张 ("</span> <span class="token operator">+</span>   paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">") 人物预测: "</span> <span class="token operator">+</span> image_dict<span class="token punctuation">[</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n准确率: {:.2f}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count <span class="token operator">/</span> len<span class="token punctuation">(</span>output<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="https://i.loli.net/2019/06/16/5d05f229ab70989012.png" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python绘图matplotlib类库</title>
      <link href="/2019/06/09/python/python-hui-tu-matplotlib/"/>
      <url>/2019/06/09/python/python-hui-tu-matplotlib/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li>简单画图  </li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#自变量x的范围以及步幅</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"First"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Second"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Third"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#参数：loc设置显示的位置，0是自适应；ncol设置显示的列数</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ncol<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>   plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>画机器学习结果图  </li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#训练和测试数据，可将n_epoch设置更大一些</span>n_epoch<span class="token operator">=</span><span class="token number">20</span>batch_size<span class="token operator">=</span><span class="token number">32</span>sess<span class="token operator">=</span>tf<span class="token punctuation">.</span>InteractiveSession<span class="token punctuation">(</span><span class="token punctuation">)</span>  sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 自定义保存数据列表</span>trainlosslist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>trainacclist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validationlosslist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validationacclist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#training</span>    train_loss<span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> n_batch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> x_train_a<span class="token punctuation">,</span> y_train_a <span class="token keyword">in</span> minibatches<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        _<span class="token punctuation">,</span>err<span class="token punctuation">,</span>ac<span class="token operator">=</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>train_op<span class="token punctuation">,</span>loss<span class="token punctuation">,</span>acc<span class="token punctuation">]</span><span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train_a<span class="token punctuation">,</span> y_<span class="token punctuation">:</span> y_train_a<span class="token punctuation">}</span><span class="token punctuation">)</span>        train_loss <span class="token operator">+=</span> err<span class="token punctuation">;</span> train_acc <span class="token operator">+=</span> ac<span class="token punctuation">;</span> n_batch <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"   train loss: %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>train_loss<span class="token operator">/</span> n_batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"   train acc: %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>train_acc<span class="token operator">/</span> n_batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 添加到列表</span>    trainlosslist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_loss<span class="token operator">/</span> n_batch<span class="token punctuation">)</span>    trainacclist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token operator">/</span> n_batch<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#validation</span>    val_loss<span class="token punctuation">,</span> val_acc<span class="token punctuation">,</span> n_batch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> x_val_a<span class="token punctuation">,</span> y_val_a <span class="token keyword">in</span> minibatches<span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> y_val<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        err<span class="token punctuation">,</span> ac <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>loss<span class="token punctuation">,</span>acc<span class="token punctuation">]</span><span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_val_a<span class="token punctuation">,</span> y_<span class="token punctuation">:</span> y_val_a<span class="token punctuation">}</span><span class="token punctuation">)</span>        val_loss <span class="token operator">+=</span> err<span class="token punctuation">;</span> val_acc <span class="token operator">+=</span> ac<span class="token punctuation">;</span> n_batch <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"   validation loss: %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>val_loss<span class="token operator">/</span> n_batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"   validation acc: %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>val_acc<span class="token operator">/</span> n_batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 添加到列表</span>    validationlosslist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val_loss<span class="token operator">/</span> n_batch<span class="token punctuation">)</span>    validationacclist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val_acc<span class="token operator">/</span> n_batch<span class="token punctuation">)</span>sess<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘图</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n_epoch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>trainacclist<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train-acc"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>validationacclist<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"validation-acc"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>trainlosslist<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train-loss"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>validationlosslist<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"validation-loss"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画两条基准线(1和0，也不能直接写)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">/</span>x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"one"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">-</span>x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 参数：loc设置显示的位置，0是自适应；ncol设置显示的列数</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ncol<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>   plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>主要y变量如果是列表要使用np.array(list)做转化，不然报错：<br><em>TypeError: only integer scalar arrays can be converted to a scalar index</em></p></blockquote><p><img src="https://i.loli.net/2019/06/09/5cfc7d83226c795923.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现文件批量重命名</title>
      <link href="/2019/06/08/python/python-shi-xian-wen-jian-pi-liang-chong-ming-ming/"/>
      <url>/2019/06/08/python/python-shi-xian-wen-jian-pi-liang-chong-ming-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 需要批量改名的文件所在文件夹</span>path_name<span class="token operator">=</span><span class="token string">'photo/路飞/'</span><span class="token comment" spellcheck="true"># 命名从1开始</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进入到文件夹内，对每个文件进行循环遍历</span>    <span class="token comment" spellcheck="true"># os.path.join(path_name, item)表示找到每个文件的绝对路径并进行拼接操作</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path_name<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path_name<span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>`</code></pre><blockquote><p>注意的是如果新名字如2.png在原文件存在，会报错。可以先统一改后缀为txt等啥的（目录下不存在的），然后再运行一次为想要的即可。</p></blockquote><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://i.loli.net/2019/06/08/5cfb3dbcc037a11759.png" alt="批量重命名后"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python根据关键词爬取Google搜索的图片</title>
      <link href="/2019/06/07/python/python-gen-ju-guan-jian-ci-pa-qu-google-sou-suo-de-tu-pian/"/>
      <url>/2019/06/07/python/python-gen-ju-guan-jian-ci-pa-qu-google-sou-suo-de-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>shutil<span class="token keyword">import</span> re<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver  <span class="token keyword">import</span> time  <span class="token keyword">import</span> urllib <span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#输出目录</span>OUTPUT_DIR <span class="token operator">=</span> <span class="token string">'photo'</span><span class="token comment" spellcheck="true">#关键字数组：将在输出目录内创建以以下关键字们命名的txt文件</span>SEARCH_KEY_WORDS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'路飞'</span><span class="token punctuation">,</span><span class="token string">'娜美'</span><span class="token punctuation">,</span> <span class="token string">'索隆'</span><span class="token punctuation">,</span> <span class="token string">'乔巴'</span><span class="token punctuation">,</span> <span class="token string">'罗宾'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 页数</span>PAGE_NUM <span class="token operator">=</span> <span class="token number">12</span>repeateNum <span class="token operator">=</span> <span class="token number">0</span>preLen <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">getSearchUrl</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isEn<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'https://www.google.com.hk/search?q='</span> <span class="token operator">+</span> keyWord <span class="token operator">+</span> <span class="token string">'&amp;safe=strict&amp;source=lnms&amp;tbm=isch'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'https://www.google.com.hk/search?q='</span> <span class="token operator">+</span> keyWord <span class="token operator">+</span> <span class="token string">'&amp;safe=strict&amp;hl=zh-CN&amp;source=lnms&amp;tbm=isch'</span><span class="token keyword">def</span> <span class="token function">isEn</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> all<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> keyWord<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 启动Firefox浏览器  </span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>OUTPUT_DIR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>OUTPUT_DIR<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>SEARCH_KEY_WORD<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> repeateNum    <span class="token keyword">global</span> preLen    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'搜索'</span> <span class="token operator">+</span> SEARCH_KEY_WORD <span class="token operator">+</span> <span class="token string">'图片中，请稍后...'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果此处为搜搜，搜索郁金香，此处可配置为：http://pic.sogou.com/pics?query=%D3%F4%BD%F0%CF%E3&amp;di=2&amp;_asf=pic.sogou.com&amp;w=05009900&amp;sut=9420&amp;sst0=1523883106480</span>    <span class="token comment" spellcheck="true"># 爬取页面地址，该处为google图片搜索url  </span>    url <span class="token operator">=</span> getSearchUrl<span class="token punctuation">(</span>SEARCH_KEY_WORD<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果是搜搜，此处配置为：'//div[@id="imgid"]/ul/li/a/img'</span>    <span class="token comment" spellcheck="true"># 目标元素的xpath，该处为google图片搜索结果内img标签所在路径</span>    xpath <span class="token operator">=</span> <span class="token string">'//div[@id="rg"]/div/div/a/img'</span>    <span class="token comment" spellcheck="true"># 浏览器打开爬取页面  </span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>      outputFile <span class="token operator">=</span> OUTPUT_DIR <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> SEARCH_KEY_WORD <span class="token operator">+</span> <span class="token string">'.txt'</span>    outputSet <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模拟滚动窗口以浏览下载更多图片  </span>    pos <span class="token operator">=</span> <span class="token number">0</span>      m <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 图片编号  </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>PAGE_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>          pos <span class="token operator">+=</span> i<span class="token operator">*</span><span class="token number">600</span> <span class="token comment" spellcheck="true"># 每次下滚600  </span>        js <span class="token operator">=</span> <span class="token string">"document.documentElement.scrollTop=%d"</span> <span class="token operator">%</span> pos          driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>          time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> element <span class="token keyword">in</span> driver<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span><span class="token punctuation">:</span>            img_url <span class="token operator">=</span> element<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> img_url <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> img_url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                outputSet<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>        <span class="token keyword">if</span> preLen <span class="token operator">==</span> len<span class="token punctuation">(</span>outputSet<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> repeateNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                repeateNum <span class="token operator">=</span> <span class="token number">0</span>                preLen <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                repeateNum <span class="token operator">=</span> repeateNum <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            repeateNum <span class="token operator">=</span> <span class="token number">0</span>            preLen <span class="token operator">=</span> len<span class="token punctuation">(</span>outputSet<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'写入'</span> <span class="token operator">+</span> SEARCH_KEY_WORD <span class="token operator">+</span> <span class="token string">'图片中，请稍后...'</span><span class="token punctuation">)</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> val <span class="token keyword">in</span> outputSet<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存url到txt文件</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        index <span class="token operator">+=</span> <span class="token number">1</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        img_name <span class="token operator">=</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span>        <span class="token comment" spellcheck="true"># 保存图片</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'photo/'</span> <span class="token operator">+</span> SEARCH_KEY_WORD <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> img_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>         file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>SEARCH_KEY_WORD<span class="token operator">+</span><span class="token string">'图片搜索写入完毕'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>outputSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> val <span class="token keyword">in</span> SEARCH_KEY_WORDS<span class="token punctuation">:</span>    output<span class="token punctuation">(</span>val<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>改配置</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输出目录</span>OUTPUT_DIR <span class="token operator">=</span> <span class="token string">'photo'</span><span class="token comment" spellcheck="true"># 关键字数组：将在输出目录内创建以以下关键字们命名的txt文件，图片另外保存</span>SEARCH_KEY_WORDS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'路飞'</span><span class="token punctuation">,</span><span class="token string">'娜美'</span><span class="token punctuation">,</span> <span class="token string">'索隆'</span><span class="token punctuation">,</span> <span class="token string">'乔巴'</span><span class="token punctuation">,</span> <span class="token string">'罗宾'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 检索页数</span>PAGE_NUM <span class="token operator">=</span> <span class="token number">12</span></code></pre><blockquote><p>输出目录’photo’这里和climbpic.py是同目录下，所以可以用相对路径。<br>关键字用列表保存，页数是搜索的深度，越大图片越多。</p></blockquote></li><li><p>图片保存</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'写入'</span> <span class="token operator">+</span> SEARCH_KEY_WORD <span class="token operator">+</span> <span class="token string">'图片中，请稍后...'</span><span class="token punctuation">)</span> file <span class="token operator">=</span> open<span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> index <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">for</span> val <span class="token keyword">in</span> outputSet<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 保存url到txt文件</span>     file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>     index <span class="token operator">+=</span> <span class="token number">1</span>     r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>val<span class="token punctuation">)</span>     img_name <span class="token operator">=</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span>     <span class="token comment" spellcheck="true"># 保存图片</span>     <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'photo/'</span> <span class="token operator">+</span> SEARCH_KEY_WORD <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> img_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>         f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>      file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>这里我保存了链接，也保存了图片，所以图片目录要预先创建好。比如‘路飞’目录等  </p></blockquote></li></ol><p><img src="https://i.loli.net/2019/06/07/5cfa8195c2de963551.png" alt="生成目录">  </p><ol start="3"><li>环境安装<br>除了引用的那些类库需要pip安装外，还有一个核心要配置。就是这个用到了其实火狐浏览器检索（必须要安装火狐），运行会自动打开火狐浏览器，这需要类似一个驱动支持。<br>需要下载对应系统的<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">mozilla/geckodriver</a>，放到浏览器的安装路径下。比如windows的<em>C:\Program Files\Mozilla Firefox</em>目录下。并为此添加环境变量到<em>path</em></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部分404大小写问题</title>
      <link href="/2019/06/01/za-ji/hexo-bo-ke-bu-fen-404-da-xiao-xie-wen-ti/"/>
      <url>/2019/06/01/za-ji/hexo-bo-ke-bu-fen-404-da-xiao-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>不知道为啥，突然部分博客404，去看了github.io仓库是没有问题的，对应路径的index.html都有。但是细细发现，目录文件夹大小写不一样。<br><img src="/2019/06/01/za-ji/hexo-bo-ke-bu-fen-404-da-xiao-xie-wen-ti/medias/images/Hexo/404problem1.png" alt="github.io仓库"><br>这是chgl16.github.io情况，红色框的是有问题时候的，都是目录都是大写。这说明是按照我本地目录名提交的，我本地的都是大写目录名。</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://cglzwz.xyzroot: /permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><blockquote><p>这是hexo博客根目录下的配置文件的url配置，没有问题。</p></blockquote><p>之前也没有问题，估计是我之前访问的URL也是大写的，所以目录名才对上。但是不知道为啥最近新写博客，发现URL变成小写了。提交到github.io的新文章也是小写目录（本地命名大写目录）。很奇怪。</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo d -g</code></pre><blockquote><p>这些都无效。但是本地<em>.deploy_git</em>目录下却生成小写的（所以使用hexo s本地测试不存在404问题）。就是提交不上仓库。。完全不理解</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这个大小写问题很乱，但是也发现了解决方法。<br>修改<em>.deploy_git/.git/</em>目录下的confi文件<br><img src="/2019/06/01/za-ji/hexo-bo-ke-bu-fen-404-da-xiao-xie-wen-ti/medias/images/Hexo/大小写config.png" alt="config文件"><br>把<em>ignorecase</em>属性改为<em>false</em>，然后重新<em>hexo d -g</em>就可以了，虽然本地目录大写，但是githu.io仓库会生成小写的，对应小写的URL。图片1黄色框就是后来生成可用的。当然重复的可以删除。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow安装</title>
      <link href="/2019/06/01/tensorflow/tensorflow-an-zhuang/"/>
      <url>/2019/06/01/tensorflow/tensorflow-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="TensorFlow分类"><a href="#TensorFlow分类" class="headerlink" title="TensorFlow分类"></a>TensorFlow分类</h2><p>TensorFlow分为纯CPU和使用GPU（比如有NVIDIA显卡）两种，类库会不一样。  </p><p>电脑没有英伟达显卡，这里安装仅支持CPU的TensorFlow。</p><h2 id="TensorFlow安装"><a href="#TensorFlow安装" class="headerlink" title="TensorFlow安装"></a>TensorFlow安装</h2><p>安装要先保证已经安装了python环境，pip</p><ol><li><p>使用pip原生安装</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 纯CPU版</span>pip3 <span class="token function">install</span> --upgrade tensorflow</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># GPU版</span>pip3 <span class="token function">install</span> --upgrade tensorflow-gpu</code></pre><p><img src="/2019/06/01/tensorflow/tensorflow-an-zhuang/medias/images/TensorFlow/TensorFlow安装.png" alt="安装"></p><blockquote><p>会自动下载其他依赖</p></blockquote></li><li><p>使用Anaconda进行安装</p><blockquote><p>这个要去其官网下载这个工具，然后使用它安装TensorFlow</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ使用</title>
      <link href="/2019/05/20/rabbitmq/rabbitmq-shi-yong/"/>
      <url>/2019/05/20/rabbitmq/rabbitmq-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1. 服务端"></a>1. 服务端</h2><p>先启动服务器</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> rabbitmq-server start</code></pre><p><img src="https://raw.githubusercontent.com/chgl16/chgl16.github.io/master/medias/images/rabbitmq-overview.png" alt="Overview"><br>这里可以看到消息的情况，现在是单个Node，显示了服务器端的一些配置信息。</p><p><img src="https://raw.githubusercontent.com/chgl16/chgl16.github.io/master/medias/images/rabbitmq-exchange.png" alt="Exchange"><br>自带8种交换机，可以在这里直接添加自定义的交换机，配置名字，可持久化等属性；<br>也可以点击交换机列表进入指定交换机查看详情，里面可以绑定队列(需要指定routing key)，配置等等。  </p><p><img src="https://raw.githubusercontent.com/chgl16/chgl16.github.io/master/medias/images/rabbitmq-queue.png" alt="Queue"><br>队列默认是没有的，可以点击添加，队列表格也有各个现存队列的信息，消息情况，点击进去可以看到具体的，也可以手动往队列发消息，purge清空队列等等。</p><h2 id="2-消费者"><a href="#2-消费者" class="headerlink" title="2. 消费者"></a>2. 消费者</h2><p>先写消费者，是因为消费者绑定队列，消费者可以直接注册队列交换机等需要的信息。当然也可以手动在服务器端创建。  </p><blockquote><p>其实很好理解，类似发信件，<em>每个收件人都有一个邮箱</em>，相当于队列。这是绑定的队列，交换机是一个邮递员，负责根据信件的目的地址（Routing key)路由分发。而邮箱和快递员等我们可以抽出来成为服务器端，我要寄件去找专门的邮递员（交换机）投递即可。  </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接收消费订单消息 * @author chgl16 * @date 2019-05-17 10:04 * @version 1.0 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"order-queue"</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"order-exchange"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            key <span class="token operator">=</span> <span class="token string">"order.*"</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token annotation punctuation">@RabbitHandler</span>  <span class="token comment" spellcheck="true">// 标识为消息消费者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> Order order<span class="token punctuation">,</span>                        Channel channel<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 手动确认需要使用channel</span>                        <span class="token annotation punctuation">@Headers</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> headers                        <span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------接收消息，开始消费-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单ID: "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从Header获取确认标识</span>        Long deliveryTag <span class="token operator">=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AmqpHeaders<span class="token punctuation">.</span>DELIVERY_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动确认ACK</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意这里是手动确认，这个方法无需手动调用，它是一个监听器，收到消息自动触发。</p></blockquote><h2 id="3-生产者"><a href="#3-生产者" class="headerlink" title="3. 生产者"></a>3. 生产者</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生成消息，发送 * @author chgl16 * @date 2019-05-16 21:27 * @version 1.0 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSender</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用提供的集成模板操作     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置相关消息唯一标识</span>        CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        correlationData<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>                <span class="token string">"order-exchange"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// exchange</span>                <span class="token string">"order.chgl16"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// routing key</span>                order<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// message</span>                correlationData  <span class="token comment" spellcheck="true">// 唯一标识</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>直接使用模板，需要手动调用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git撤销commit</title>
      <link href="/2019/05/20/git/git-che-xiao-commit/"/>
      <url>/2019/05/20/git/git-che-xiao-commit/</url>
      
        <content type="html"><![CDATA[<h2 id="问题1：无法commit"><a href="#问题1：无法commit" class="headerlink" title="问题1：无法commit"></a>问题1：无法commit</h2><pre class=" language-bash"><code class="language-bash">error: pathspec <span class="token string">'fix:修复排版'</span> did not match any file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> known to</code></pre><p>其实原因很明显，虽然git status看到了修改的文件，但是却没有匹配的，是因为没有保存，记得Crtl + S</p><blockquote><p>也有网友的是因为<em>git commit ‘xx’</em>使用了单引号的缘故</p></blockquote><h2 id="问题2：撤销commit"><a href="#问题2：撤销commit" class="headerlink" title="问题2：撤销commit"></a>问题2：撤销commit</h2><p>有时候没有commit了，但是不想提交到远程仓库，或者pull的时候需要提交，我们不想，可以如下操作</p><ol><li>找到上次提交的commit-id<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log</code></pre></li><li>版本回退,同时也有撤销的效果<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard commit-id</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java序列化问题</title>
      <link href="/2019/05/19/java/java-xu-lie-hua-wen-ti/"/>
      <url>/2019/05/19/java/java-xu-lie-hua-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1. 序列化"></a>1. 序列化</h2><pre><code>序列化是将对象转为文件，方便传输共享，比如消息队列传输的消息</code></pre><p>&emsp;&emsp;Java实现序列化只需要实现Serializable接口即可，该接口源码内容只有一个SerialVersionUID常量，再深入为Native了。</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>2926828973935247000L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      ...    */</span><span class="token punctuation">}</span></code></pre><blockquote><p>serialVersionUID默认是1L，这个是序列化与反序列化比对的关键信息。可以使用插件GenerateSerialVersionUID随机生成。一般都是20个数。</p></blockquote><h2 id="2-序列化与反序列化问题"><a href="#2-序列化与反序列化问题" class="headerlink" title="2. 序列化与反序列化问题"></a>2. 序列化与反序列化问题</h2><h4 id="2-1-判断原理"><a href="#2-1-判断原理" class="headerlink" title="2.1 判断原理"></a>2.1 判断原理</h4><p>&emsp;&emsp;序列化与反序列化需要判断很多，以下举RabbitMQ消息生产者和消费者传递的消息Order对象为例子。 </p><ul><li>首先SerialVersionUID就需要一致，就是两边的Order类都使用同一个SerialVersionUID。</li><li>类的属性方法等一致，<strong>包名一致</strong>（重点），我们序列化与反序列化常常是跨项目的，但是Order包名不一样是不能反序列化的，会报错ClassNotFound，因此我们常用的解决方法是保证包名一致，比如xyz.cglzwz.common.entity.Order，多写一个。或者将这个类使用Jar包作为依赖共享。</li></ul><h4 id="2-2-序列化与反序列化转换实现："><a href="#2-2-序列化与反序列化转换实现：" class="headerlink" title="2.2 序列化与反序列化转换实现："></a>2.2 序列化与反序列化转换实现：</h4><p>&emsp;&emsp;可以手写实现，主要使用FileOutputStream, ObjectOutputStream,FileInputStream,ObjectInputStream。</p><blockquote><p>当然如果是内部封装好了的反序列化，比如上面的RabbitMQ消费者那里对消息的反序列化就是Spring内部完整的，我们就无法修改了。</p></blockquote><p>代码后续补上，<a href="https://www.jianshu.com/p/1bae21fa2cd6" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Serializable接口 </tag>
            
            <tag> 序列化与反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA一个窗口多个项目</title>
      <link href="/2019/05/17/kai-fa-gong-ju/idea-yi-ge-chuang-kou-duo-ge-xiang-mu/"/>
      <url>/2019/05/17/kai-fa-gong-ju/idea-yi-ge-chuang-kou-duo-ge-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="多个并列-推荐"><a href="#多个并列-推荐" class="headerlink" title="多个并列(推荐)"></a>多个并列(推荐)</h2><p>平时IDEA都是默认一个窗口一个项目，当开发到Spring Cloud或者中间件这种我们要消费者提供者等等的时候，并不方便。并列也很简单。<br>每个项目都是一个Module。<br>操作：<br>&emsp;&emsp;我们在只有一个项目的窗口，选择new -&gt; Module from existing sources即可。然后开发就很方便。</p><h2 id="父子项目-不推荐"><a href="#父子项目-不推荐" class="headerlink" title="父子项目(不推荐)"></a>父子项目(不推荐)</h2><p><img src="https://raw.githubusercontent.com/chgl16/chgl16.github.io/master/medias/images/IDEA1.png" alt="骨架"></p><p>案例：<br>&emsp;&emsp;创建的父项目是空的基本，比如一开始做的那个RabbitMQ的demo, 我想父项目命名为rabbitmq-demo，然后pom.xml加载spring-boot-starter-amqp依赖，以后再写两个子项目</p><p>&emsp;&emsp;分别是producer和cunsumer，正好两个都继承父项目的依赖，就不用再导入amqp依赖了。</p><p>操作：</p><ol><li>先使用Spring Initializr创建一个父项目，然后把它的src删除，配置好pom.xml</li><li>分别创建两个子项目，使用new -&gt; Module创建，一样使用Spring Initialzr。然后这两个项目的pom.xml再改为就继承父项目的即可</li></ol><p>弊端：</p><ol><li>下次导入IDEA的话，或者从Git导入的话很麻烦。因为重新打开默认了父项目是一个项目，里面的两个子项目变成了纯文件夹，虽然可以改Project Structure，但是仍然不乐观。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep命令</title>
      <link href="/2019/05/16/linux/grep-ming-ling/"/>
      <url>/2019/05/16/linux/grep-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p><p>&emsp;&emsp;grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>&emsp;&emsp;grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre class=" language-bash"><code class="language-bash">^  <span class="token comment" spellcheck="true">#锚定行的开始 如：'^grep'匹配所有以grep开头的行。    </span>$  <span class="token comment" spellcheck="true">#锚定行的结束 如：'grep$'匹配所有以grep结尾的行。    </span><span class="token keyword">.</span>  <span class="token comment" spellcheck="true">#匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。    </span>*  <span class="token comment" spellcheck="true">#匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。    </span>.*   <span class="token comment" spellcheck="true">#一起用代表任意字符。   </span><span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。    </span><span class="token punctuation">[</span>^<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    </span>\<span class="token punctuation">(</span><span class="token punctuation">..</span>\<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#标记匹配字符，如'\(love\)'，love被标记为1。    </span>\<span class="token operator">&lt;</span>      <span class="token comment" spellcheck="true">#锚定单词的开始，如:'\&lt;grep'匹配包含以grep开头的单词的行。    </span>\<span class="token operator">></span>      <span class="token comment" spellcheck="true">#锚定单词的结束，如'grep\>'匹配包含以grep结尾的单词的行。    </span>x\<span class="token punctuation">{</span>m\<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#重复字符x，m次，如：'0\{5\}'匹配包含5个o的行。    </span>x\<span class="token punctuation">{</span>m,\<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#重复字符x,至少m次，如：'o\{5,\}'匹配至少有5个o的行。    </span>x\<span class="token punctuation">{</span>m,n\<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#重复字符x，至少m次，不多于n次，如：'o\{5,10\}'匹配5--10个o的行。   </span>\w    <span class="token comment" spellcheck="true">#匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。   </span>\W    <span class="token comment" spellcheck="true">#\w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </span>\b    <span class="token comment" spellcheck="true">#单词锁定符，如: '\bgrep\b'只匹配grep。  </span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>检索文件中的关键信息<br><strong>grep pattern file</strong></p><pre class=" language-bash"><code class="language-bash">chgl16@chgl16-laptop:~/Blog/hexo-blog$ <span class="token function">grep</span> <span class="token string">"ta"</span> README.md├── _data  └── tags </code></pre><blockquote><p>这里的”ta”表示包含”ta”的行，可以不加双引号，也可以加单引号，主要是为了区分。</p></blockquote></li><li><p>做输出过滤管道</p><pre class=" language-bash"><code class="language-bash">chgl16@chgl16-laptop:~/Blog/hexo-blog$ <span class="token function">netstat</span> -tnpl <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"80"</span><span class="token punctuation">(</span>Not all processes could be identified, non-owned process infowill not be shown, you would have to be root to see it all.<span class="token punctuation">)</span>tcp        0      0 127.0.0.1:1080          0.0.0.0:*               LISTEN      2809/python     </code></pre><p>把前面的一个输出做”80”过滤</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程监控命令</title>
      <link href="/2019/05/16/linux/jin-cheng-jian-kong-ming-ling/"/>
      <url>/2019/05/16/linux/jin-cheng-jian-kong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ps"><a href="#1-ps" class="headerlink" title="1. ps"></a>1. ps</h2><p>显示的是一个当前进程的快照，不是实时监听的，那个要用top</p><pre class=" language-bash"><code class="language-bash">chgl16@chgl16-laptop:~$ <span class="token function">ps</span> -ef<span class="token comment" spellcheck="true"># 用户     进程ID 父进程        终端ID   进程使用CPU的时间</span>UID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 5月15 ?       00:00:30 /sbin/init splashroot         2     0  0 5月15 ?       00:00:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>root         4     2  0 5月15 ?       00:00:00 <span class="token punctuation">[</span>kworker/0:0H<span class="token punctuation">]</span>root         6     2  0 5月15 ?       00:00:00 <span class="token punctuation">[</span>mm_percpu_wq<span class="token punctuation">]</span>root         7     2  0 5月15 ?       00:00:01 <span class="token punctuation">[</span>ksoftirqd/0<span class="token punctuation">]</span>root         8     2  0 5月15 ?       00:01:41 <span class="token punctuation">[</span>rcu_sched<span class="token punctuation">]</span>root         9     2  0 5月15 ?       00:00:00 <span class="token punctuation">[</span>rcu_bh<span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>常用-ef参数，-e表示every，等价-A。-f是显示更多的字段，比如UID，PPID等这些都是不带参数的ps没有的。</p><h2 id="2-top"><a href="#2-top" class="headerlink" title="2. top"></a>2. top</h2><p>top可以实时监控，对应kill pid即可</p><h2 id="3-netstat"><a href="#3-netstat" class="headerlink" title="3. netstat"></a>3. netstat</h2><p>常用 netstat -tpln; </p><ul><li>-t： tcp</li><li>-p: 显示PID</li><li>-l: 显示监听的服务sockets</li><li>-n: 序列化，不解析显示主机名（太慢了）</li></ul><h2 id="4-lsof"><a href="#4-lsof" class="headerlink" title="4. lsof"></a>4. lsof</h2><p>lsof - list open files<br>也可以看看进程端口情况</p><pre class=" language-bash"><code class="language-bash">chgl16@chgl16-laptop:~$ <span class="token function">lsof</span> -i:15672COMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEchrome  2893 chgl16   90u  IPv4 582906      0t0  TCP localhost:58926-<span class="token operator">></span>localhost:15672 <span class="token punctuation">(</span>ESTABLISHED<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ps </tag>
            
            <tag> top </tag>
            
            <tag> netstat </tag>
            
            <tag> lsof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ架构和核心概念</title>
      <link href="/2019/05/15/rabbitmq/rabbitmq-jia-gou-he-he-xin-gai-nian/"/>
      <url>/2019/05/15/rabbitmq/rabbitmq-jia-gou-he-he-xin-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://raw.githubusercontent.com/chgl16/chgl16.github.io/master/medias/images/RabbitMQ.png" alt="架构"></p><h2 id="AMQP核心概念"><a href="#AMQP核心概念" class="headerlink" title="AMQP核心概念"></a>AMQP核心概念</h2><ul><li>Server: 又称Broker，接受客户端的连接，实现AMQP实体服务</li><li>Connection: 连接，应用程序与Broker的网络连接</li><li>Channel: 网络信道，几乎所有的操作都是在Channel中进行，Channel是<strong>进行消息读写</strong>的通道。客户端可建立多个Channel，每个Channel代表一个会话任务</li><li>Message: 消息，服务端和应用程序之间传送的数据。由Properties和Body组成。Properties可以对消息进行修饰，比如优先级、延迟等高级功能，Body则就是消息内容。</li><li>Virtual host: 虚拟主机，用于进行逻辑隔离，最上层的消息路由。一个Virtual host里面可以有若干个Exchange和Queue，同一个Virtual host内不能有相同名字的Exchange或Queue</li><li>Exchange： 交换机，接收消息，根据路由键（routing key)转发到相应绑定的队列，常用的有直连、主题、广播</li><li>Binding: Exchange和Queue之间的虚拟连接，Binding中包含Routing key</li><li>Routing key: 一个路由规则，比如关键词</li><li>Queue： 消息队列</li><li>Publisher: 生产者，通过Channel发送消息到服务端的Exchange，即指定了Exchange和Routing key</li><li>Cunsumer: 消费者，监听某个对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ介绍&amp;安装</title>
      <link href="/2019/05/15/rabbitmq/rabbitmq-an-zhuang/"/>
      <url>/2019/05/15/rabbitmq/rabbitmq-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="https://blog.huitu.club/images/201809/exchanges-topic-fanout-direct.png" alt="RabbitMQ"></p><ul><li>RabbitMQ是一种基于AMQP（高级消息队列协议）的消息中间件。</li><li>分为消息生产者、消费者</li><li>服务端是一个broker，里面就是一个虚拟主机，虚拟主机里面有三种交换机和绑定的队列</li><li>直连、主题、广播三种交换机，根据关键字单词匹配</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装比较繁琐，因为RabbitMQ是基于Erlang语言编写的，需要安装那个语言的环境，类似安装Tomcat需要安装JDK。  </p><p>可以去官网下载最新包或者源码安装，以下直接使用shell自带的源安装，估计会有些老版本，后期配置麻烦点。</p><p><br></p><ol><li><p>安装Erlang语言环境</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install erlang-nox</code></pre></li><li><p>安装RabbitMQ</p><pre class=" language-shell"><code class="language-shell">sudo apt updatesudo apt install rabbitmq-server</code></pre></li></ol><h2 id="启动使用"><a href="#启动使用" class="headerlink" title="启动使用"></a>启动使用</h2><pre class=" language-shell"><code class="language-shell">sudo rabbitmq-server start</code></pre><p>但是刚刚安装完已经启动了，会报错</p><pre class=" language-shell"><code class="language-shell">ERROR: node with name "rabbit" already running on "chgl16-laptop"</code></pre><p>使用restart也一样报这个错误。解决方法使用top查看到rabbitmq进程把它<em>sudo kill pid</em>，再启动即可</p><p>成功启动后如下</p><pre class=" language-bash"><code class="language-bash">chgl16@chgl16-laptop:~$ <span class="token function">sudo</span> rabbitmq-server restart  RabbitMQ 3.6.10. Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> 2007-2017 Pivotal Software, Inc.  <span class="token comment" spellcheck="true">##  ##   Licensed under the MPL.  See http://www.rabbitmq.com/</span>  <span class="token comment" spellcheck="true">##  ##</span>  <span class="token comment" spellcheck="true">##########  Logs: /var/log/rabbitmq/rabbit@chgl16-laptop.log</span>  <span class="token comment" spellcheck="true">######  ##        /var/log/rabbitmq/rabbit@chgl16-laptop-sasl.log</span>  <span class="token comment" spellcheck="true">##########</span>    Starting broker<span class="token punctuation">..</span>. completed with 0 plugins.</code></pre><p>打开默认<em>localhost:15672</em> 打不开，可以看到上面完成了0个插件，就是因为插件没有配置加载造成的。</p><p>使用如下命令加载命令，记得使用权限，不然报错</p><pre class=" language-shell"><code class="language-shell">sudo rabbitmq-plugins enable rabbitmq_management</code></pre><blockquote><p>命令可以打出前面一部分然后双击tab键，会显示可用的匹配命令。</p></blockquote><p>  重启成功  </p><p><img src="http://openskill.cn/uploads/article/20160330/53bd1da79ef61e9cfa95fd130c0d73ac.png" alt="登录"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用双tab补全rabbit可用看到如下命令</p><pre class=" language-bash"><code class="language-bash">rabbitmqadmin     rabbitmqctl       rabbitmq-plugins  rabbitmq-server</code></pre><p>一开始是没有账号的，需要使用rabbitmqctl配置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 用户名为root, 密码为mima</span><span class="token function">sudo</span> rabbitmqctl add_user root mima<span class="token comment" spellcheck="true"># 设置root为管理员</span><span class="token function">sudo</span> rabbitmqctl set_user_tags root administrator<span class="token comment" spellcheck="true"># 赋予操作虚拟机内容的权限</span><span class="token function">sudo</span> rabbitmqctl set_permissions -p / root <span class="token string">'.*'</span> <span class="token string">'.*'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA一些快捷技巧</title>
      <link href="/2019/05/12/kai-fa-gong-ju/idea-kai-fa-yi-xie-kuai-jie-jian-ji-qiao/"/>
      <url>/2019/05/12/kai-fa-gong-ju/idea-kai-fa-yi-xie-kuai-jie-jian-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><strong>内容操作快捷键</strong></p><ul><li>复制当前行 Crtl + D</li><li>删除当前行 Crtl + X 或者 Crtl + Y</li><li>本文件内容搜索 Crtl + F</li><li>本文件内容搜索替换 Crtl + R</li><li><p>项目全局文件内容搜索 Crtl + Shift + F</p></li><li><p>内容右对齐 Tab</p></li><li>内容左对齐 Shift + Tab</li></ul><hr><p><strong>窗口快捷键</strong></p><ul><li>打开/隐藏左侧项目目录结果 Alt + 1  (小键盘数字无效)</li><li>运行窗口 Alt + 4</li><li>命令行终端 Alt + F12</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用本地图片</title>
      <link href="/2019/05/04/za-ji/hexo-shi-yong-ben-di-tu-pian/"/>
      <url>/2019/05/04/za-ji/hexo-shi-yong-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先保存自己本地使用的图片，发现放到GitHub仓库的是public文件夹，我那时候试了在本地public下直接创建一个images文件夹放图片，URL使用仓库图片地址。是可以的，但是<em>hexo clean</em>后化为乌有。<br><br></p><p>因此我尝试在本地的themes/当前主题下/source/medias/创建images文件夹，因为发现主题的图片不会被删掉，而且是在里面引用。会被解析到public，换其他主题，只需要把其拷贝<br><img src="/2019/05/04/za-ji/hexo-shi-yong-ben-di-tu-pian/medias/images/tree.png" alt="tree"><br><br></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>themes/主题/source下的目录会投影到GitHub仓库的根目录，因此medias就是一个更目录，而我们旗下的images相对路径引用就简单了</p><pre class=" language-bash"><code class="language-bash">url: <span class="token string">'/medias/images/tree.png'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intern方法及字符串拼接</title>
      <link href="/2019/04/27/java/intern-fang-fa-ji-zi-fu-chuan-pin-jie/"/>
      <url>/2019/04/27/java/intern-fang-fa-ji-zi-fu-chuan-pin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-intern-方法"><a href="#1-intern-方法" class="headerlink" title="1. intern()方法"></a>1. intern()方法</h2><blockquote><p>Returns a canonical representation for the string object.<br>A pool of strings, initially empty, is maintained privately by the class String. </p></blockquote><blockquote><p>When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned. </p></blockquote><blockquote><p>It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true. </p></blockquote><blockquote><p>All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java™ Language Specification.  </p></blockquote><blockquote><p>Returns:a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.    </p></blockquote><p>这是方法原文解析，这是个native本地方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> String <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个方法就是用来返回调用对象或者引用在常量池中的地址。在输出上没有特别，主要是地址问题。比如：</p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "ab"</span></code></pre><ol><li>这种是”ab”已经在常量池有了，所以调用intern是直接返回这个地址的，str1这个变量本来就是指向常量池”ab”的地址的。</li></ol><pre class=" language-java"><code class="language-java">String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"cd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "cd"</span></code></pre><ol start="2"><li>这个如果常量池没有”cd”会在常量池创建，然后再堆区创建，指向常量池，作为引用str2是指向堆区的，str2.intern是指向常量池的。</li></ol><h2 id="2-字符串拼接问题"><a href="#2-字符串拼接问题" class="headerlink" title="2. 字符串拼接问题"></a>2. 字符串拼接问题</h2><pre class=" language-java"><code class="language-java">String str<span class="token operator">=</span><span class="token string">"ab"</span><span class="token punctuation">;</span>String str1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>  String str2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>  String combo1 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第一种情况</span>String combo2 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 第二种情况</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> combo1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> combo2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>combo1 <span class="token operator">==</span> combo2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>这个拼接不同是因为如果是变量的拼接（第二种情况）是使用StringBuffer（或者StringBuilder）实现的，本地有创建对象，返回的是堆区地址。<br>而常量拼接是直接在常量池创建的，地址是常量池。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intern() </tag>
            
            <tag> str1 + str2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object对象方法</title>
      <link href="/2019/04/24/java/object-dui-xiang-fang-fa/"/>
      <url>/2019/04/24/java/object-dui-xiang-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Object对象方法"><a href="#Object对象方法" class="headerlink" title="Object对象方法"></a>Object对象方法</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">native</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException<span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>一共11个，3个重载的wait方法，所以可以说是9个</p><ol><li><p>谨记子类的equals()方法也是Object参数，boolean返回值，String类重写的也是。以下是String重写equals的源码</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>         <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>             <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>             <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 i<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>clone()方法这里可以重写，不然只是浅拷贝，因为涉及到对象的依赖关系。</p></li><li><p>hashCode()：在Object类里面是native修饰的方法，就没法看了，可以看看String对其的重写，很简单的对字符转为ASCII码加乘。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      hash <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>finalize(): 是一个建议GC的方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS机制初识</title>
      <link href="/2019/04/23/duo-xian-cheng-bing-fa-bian-cheng/cas-chu-shi/"/>
      <url>/2019/04/23/duo-xian-cheng-bing-fa-bian-cheng/cas-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>对于count++的多线程问题，三步需要保证原子性，volatile关键字做不到，synchronized是可以的，但是synchronized是悲观锁，以最坏的加锁做保证，线程上下文切换和阻塞的花销很大，虽然后期jdk对其做了优化。但是还是有一种更好的方式解决这个问题。就是CAS，一种乐观锁机制。</p><h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAS </tag>
            
            <tag> 乐观锁&amp;悲观锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机类加载机制</title>
      <link href="/2019/04/21/jvm/lei-jia-zai-guo-cheng/"/>
      <url>/2019/04/21/jvm/lei-jia-zai-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7个阶段。其中准备、验证、解析3个部分统称为连接（Linking）。如图所示。<br><img src="https://img-blog.csdn.net/20160308184325593" alt></p><p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。以下陈述的内容都已HotSpot为基准。</p><h2 id="1-加载"><a href="#1-加载" class="headerlink" title="1. 加载"></a>1. 加载</h2><p>在加载阶段（可以参考java.lang.ClassLoader的loadClass()方法），虚拟机需要完成以下3件事情：</p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流（并没有指明要从一个Class文件中获取，可以从其他渠道，譬如：网络、动态生成、数据库等）；</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口；(如果没有，使用双亲委派机制加载) </li></ol><p>加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</p><h2 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h2><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求（版本类型之类的，有很多第三方虚拟机），并且不会危害虚拟机自身的安全。<br>验证阶段大致会完成4个阶段的检验动作：</p><ol><li>文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以魔术0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li><li>元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。</li><li>字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li><li>符号引用验证：确保解析动作能正确执行。<br>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</li></ol><h2 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h2><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>那变量value在准备阶段过后的初始值为0而不是123。因为这时候尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。<br>至于“特殊情况”是指：public static final int value=123，即当类字段的字段属性是ConstantValue时，会在准备阶段初始化为指定的值，所以标注为final之后，value的值在准备阶段初始化为123而非0。</p><blockquote><p>也就是只会给static的类变量或者语句块初始化，赋予的还是默认值。final static的会直接在常量池创建，有应该的值。</p></blockquote><h2 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h2><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。</p><h2 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5. 初始化"></a>5. 初始化</h2><p>类初始化阶段是类加载过程的最后一步，到了初始化阶段，才真正开始执行类中定义的java程序代码。在准备极端，变量已经付过一次系统要求的初始值，而在初始化阶段，则根据程序猿通过程序制定的主管计划去初始化类变量和其他资源，或者说：初始化阶段是执行类构造器\<clinit>()方法的过程。<br>\<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块static{}中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问</clinit></clinit></p><p>剩下的就是使用和卸载了</p><h2 id="参考附录"><a href="#参考附录" class="headerlink" title="参考附录"></a>参考附录</h2><ol><li><a href="http://www.importnew.com/18548.html" target="_blank" rel="noopener">Java虚拟机类加载机制</a></li><li><a href="https://www.cnblogs.com/chanshuyi/p/the_java_class_load_mechamism.html" target="_blank" rel="noopener">两道面试题，带你解析Java类加载机制</a></li><li><a href="https://blog.csdn.net/ns_code/article/details/17881581" target="_blank" rel="noopener">【深入Java虚拟机】之四：类加载机制</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 类加载机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重定向和转发</title>
      <link href="/2019/04/21/http/qing-qiu-he-chong-ding-xiang/"/>
      <url>/2019/04/21/http/qing-qiu-he-chong-ding-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><ul><li>在Server端sendRedirect重定向</li><li>在Server端使用jsp或RequestDispatcher进行forward转发</li><li>在Browser端使用Javascript进行重定向</li><li>在Browser端使用html标签进行重定向</li></ul><p>这是最常用的四种情况，也是存在的四种。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>重定向sendRedirect更像是客户端的行为，URL会发生改变，当然服务端也可以使用response.sendRedirect(url);来完成重定向，效果一样。</li><li>跳转forward这里只能是服务端的行为，比如<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>jsp<span class="token operator">:</span>forward page<span class="token operator">=</span><span class="token string">"url"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">return</span> <span class="token string">"forward:/url"</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><table><thead><tr><th>状态码</th><th>具体</th></tr></thead><tbody><tr><td>301（永久转移）</td><td>请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。</td></tr><tr><td>302（临时转移）</td><td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。<em>也是常见的server的sendRedirect</em></td></tr><tr><td>303（查看其它位置）</td><td>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</td></tr><tr><td>304（未修改）</td><td>自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。其实就是缓存，但是还是会请求服务端，不过响应头的字段是未修改。 <em>可以使用F5和Ctrl + F5看network</em></td></tr><tr><td>305（使用代理）</td><td>请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td></tr></tbody></table><blockquote><p>更多见参考附录的《HTTP 304状态码的详细讲解》</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/radic_feng/article/details/6798378" target="_blank" rel="noopener">实现页面重定向（跳转）的4种方式</a></li><li><a href="https://blog.csdn.net/meiyalei/article/details/2129120" target="_blank" rel="noopener">HTTP中的重定向和请求转发的区别</a></li><li><a href="https://blog.csdn.net/huwei2003/article/details/70139062" target="_blank" rel="noopener">HTTP 304状态码的详细讲解</a></li><li><a href="https://blog.csdn.net/reliveIT/article/details/50776984" target="_blank" rel="noopener">http重定向301/302/303/307</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重定向sendRedirect </tag>
            
            <tag> 转发forward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>surrounded-regions搜索</title>
      <link href="/2019/04/21/leetcode/surrounded-regions-sou-suo/"/>
      <url>/2019/04/21/leetcode/surrounded-regions-sou-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.nowcoder.com/practice/c159db5028034aa595043a1a220a62dd?tpId=46&amp;tqId=29050&amp;tPage=2&amp;rp=2&amp;ru=/ta/leetcode&amp;qru=/ta/leetcode/question-ranking" target="_blank" rel="noopener">题目地址</a><br>Given a 2D board containing’X’and’O’, capture all regions surrounded by’X’.<br>A region is captured by flipping all’O’s into’X’s in that surrounded region .</p><p>For example,</p><blockquote><p>X X X X<br>X O O X<br>X X O X<br>X O X X  </p></blockquote><p>After running your function, the board should be:</p><blockquote><p>X X X X<br>X X X X<br>X X X X<br>X O X X</p></blockquote><p>就是如果不全被包括（四个方向）的’O’就保留，所以从边缘出发深度优先搜索很容易解决，把满足条件的替换为’D’，就是分块了，到不了的还是’O’最后替换为’X’，而’D’最后替换为’O’。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 应该最先判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board <span class="token operator">==</span> null <span class="token operator">||</span> board<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rlen <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> clen <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 搜索四边</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> rlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 去掉重合的两个点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> clen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rlen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> clen<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">)</span>                     board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">)</span>                    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">>=</span> board<span class="token punctuation">.</span>length <span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">>=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'O'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上右下左顺时针方向</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>养成最先处理边界、空值是习惯</li><li>二维数组的board.length是行数，board[0].length是列数</li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2019/04/19/qian-duan/kua-yu/"/>
      <url>/2019/04/19/qian-duan/kua-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>常见的调用接口被阻碍了，爆跨域问题。也就是从一个源下载的文档或者脚本与来自另一个源的资源进行交互被限制了。</p><h2 id="跨域的原因"><a href="#跨域的原因" class="headerlink" title="跨域的原因"></a>跨域的原因</h2><p>出现跨域完全是浏览器搞的，<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">浏览器的同源策略</a>，其实是一种安全机制，用来隔离潜在的恶意文件的安全机制。是药三分毒，所以对于我们的一些调用有时候也会被隔离了。但是它整体是个好东西。而且对于我们自己需要调用的好东西跨域了，我们是有正确的解决方法的。主要是接口请求和DOM查询。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">不要再问我跨域的问题了</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的volatile关键字</title>
      <link href="/2019/04/18/duo-xian-cheng-bing-fa-bian-cheng/java-zhong-de-volatile-guan-jian-zi/"/>
      <url>/2019/04/18/duo-xian-cheng-bing-fa-bian-cheng/java-zhong-de-volatile-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-volatile概述"><a href="#1-volatile概述" class="headerlink" title="1. volatile概述"></a>1. volatile概述</h2><p>&emsp;&emsp;volatile是Java的一个关键字，只能用于修饰变量，<strong>目的是解决共享变量内存可见性问题，保证了可见性（每次读写都刷新内存），但是不保证原子性</strong>。对比笨重的锁机制（线程上下文的切换开销大），如synchronized内置锁，这个volatile就是Java提供的一种弱形式的同步。</p><h2 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h2><p>以下这个代码没有使用任何同步措施，再多线程下的value的读写是不安全的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> vlass ThreadSafeInteger <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        reutrn value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>以下使用synchronized关键字，声明为隐式对象锁，可以解决问题，但是开销是问题。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> vlass ThreadSafeInteger <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        reutrn value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>看看下面的使用volatile，也是可以的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> vlass ThreadSafeInteger <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        reutrn value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><blockquote><p>前面提到volatile只能保证变量在多线程环境的可见性，这里的作用和synchronized是等价的，只是锁有开销，前后阻塞啥的，volatile就不会阻塞</p></blockquote><h2 id="3-保证可见性-amp-不保证原子性"><a href="#3-保证可见性-amp-不保证原子性" class="headerlink" title="3. 保证可见性 &amp; 不保证原子性"></a>3. 保证可见性 &amp; 不保证原子性</h2><p>&emsp;&emsp;可见性好理解，每次都啥刷新内存。原子性是指一些列操作时，要么全部执行，要么全部不执行，不会只执行一部分。常见的是count++;</p><blockquote><p>count++;   //  是三步：获取-计算-写入</p></blockquote><p>如下代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>cglzwz<span class="token punctuation">.</span>thread_concurrency<span class="token punctuation">.</span>other<span class="token punctuation">.</span>_volatile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 验证volatile关键字的可见性 * volatile只能保证他们操作的count是同一块内存，但依然可能出现写入脏数据的情况。 * @author chgl16 * @date 2019-04-16 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果仍然是 &lt; 20000, 大约15000左右。</p><blockquote><p>时有synchronized可以解决这里的原子性问题，但是并发量高的时候是个大开销。这种问题可以<em>CAS</em>操作解决</p></blockquote><p>而<strong>volatile不保证原子性</strong>，所以一般就以下两种情况时有volatile关键字：</p><ol><li>不需要原子性的同步操作变量；</li><li>没有加锁的，因为加锁已经保证了同步了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile </tag>
            
            <tag> 可见性&amp;原子性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上往下打印二叉树</title>
      <link href="/2019/04/14/jian-zhi-offer/cong-shang-wang-xia-da-yin-er-cha-shu/"/>
      <url>/2019/04/14/jian-zhi-offer/cong-shang-wang-xia-da-yin-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。  </p><p><a href="https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&amp;tqId=11175&amp;tPage=2&amp;rp=2&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">=&gt;题目地址</a></p><hr><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    TreeNode left <span class="token operator">=</span> null<span class="token punctuation">;</span>    TreeNode right <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">PrintFromTopToBottom</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 空返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义队列</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode temp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>使用队列实现，Java的Queue可以参考<a href="http://www.runoob.com/java/data-queue.html" target="_blank" rel="noopener">菜鸟教程</a></p></blockquote><ol><li>offer()是插入元素到队尾</li><li>poll()是返回队头元素，并从队伍删去，peek()和element()方法不会删除</li><li>注意二叉树为空的处理</li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> Java队列Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2019/01/14/za-ji/ce-shi/"/>
      <url>/2019/01/14/za-ji/ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="测试显示"><a href="#测试显示" class="headerlink" title="测试显示"></a>测试显示</h2><pre><code>加重内容</code></pre><p>正文…. </p><p>==使用颜色标志==</p><p><strong>加粗</strong></p><p><em>斜体</em></p><blockquote><p>引用…</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ...</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Java 代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建博客总结</title>
      <link href="/2019/01/04/za-ji/hexo-bo-ke-da-jian-zong-jie/"/>
      <url>/2019/01/04/za-ji/hexo-bo-ke-da-jian-zong-jie/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="重要操作"><a href="#重要操作" class="headerlink" title="重要操作"></a>重要操作</h3><ol><li>将source下的个人md博客文件生成html、css、js到public目录下<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># generate 可缩写为g，打开localhost:4000</span>hexo generate</code></pre></li></ol><ol start="2"><li><p>部署到本地服务器，可做测试</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># server 可缩写为s</span>hexo server</code></pre></li><li><p>关联到github.io仓库</p><ol><li>安装deploy git<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这个是：hexo 和git自动对接上传的关键组件</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre></li><li>修改_config.yml全局配置文件的部署仓库地址<pre class=" language-yml"><code class="language-yml">deploy:type: gitrepository: https://github.com/chgl16/chgl16.github.io.gitbranch: maste</code></pre></li></ol></li><li><p>将本地博客(主要是public文件夹的内容)部署到github.io</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># deploy 可缩写为d, 需要清空缓存，不然提交的不是更新的</span>hexo clean  hexo deploy -g</code></pre></li><li><p>hexo博客站点美化</p></li></ol><hr><h3 id="参考附录"><a href="#参考附录" class="headerlink" title="参考附录"></a>参考附录</h3><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5ODM3MjcxNQ==&amp;mid=2247485963&amp;idx=1&amp;sn=c3270696be894c4223a7c12597661ff9&amp;chksm=eca7910fdbd0181968206615164974f6e854939ba91028765858f334029e7a68201da84a8e53&amp;mpshare=1&amp;scene=1&amp;srcid=0119dZMVcTeSV7PulcRmBvRg#rd" target="_blank" rel="noopener">5分钟 0元搭建个人独立博客网站（一）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5ODM3MjcxNQ==&amp;mid=2247486088&amp;idx=1&amp;sn=c61da14fa2a56771761e15b0415c9f54&amp;chksm=eca7918cdbd0189a0a0a3394ee078aa360befd9846815a7977e3e92996d9e37ddcf654341822&amp;mpshare=1&amp;scene=1&amp;srcid=0119FWZ2doO1svr2XoplVu79#rd" target="_blank" rel="noopener">5分钟 0元搭建个人独立博客网站（二）</a></li><li><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Node.js、npm</a></li><li><a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">hexo使用next主题美化</a>  </li><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" target="_blank" rel="noopener">hexo使用hexo-themes-matery主题　</a>  </li><li><a href="https://rua.kim/2019/02/26/mogai/" target="_blank" rel="noopener">matery主题折腾博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
